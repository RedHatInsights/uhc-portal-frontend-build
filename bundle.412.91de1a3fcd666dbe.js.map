{"version":3,"file":"bundle.412.91de1a3fcd666dbe.js","mappings":"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","sources":["webpack://cloud.openshift.com/./src/common/getBaseName.ts","webpack://cloud.openshift.com/./src/common/getNavClickParams.ts","webpack://cloud.openshift.com/./src/components/App/Router.tsx","webpack://cloud.openshift.com/./src/chrome-main.tsx","webpack://cloud.openshift.com/./src/main.tsx","webpack://cloud.openshift.com/./src/redux/actions/featureActions.ts","webpack://cloud.openshift.com/./src/redux/actions/userActions.ts","webpack://cloud.openshift.com/./src/redux/store.ts"],"sourcesContent":["const {\n  insights: { appname },\n} = require('../../package.json');\n\nconst getBaseEnv = (): string => {\n  if (window?.location.pathname.startsWith('/beta')) {\n    return '/beta';\n  }\n  if (window?.location.pathname.startsWith('/preview') || APP_BETA) {\n    return '/preview';\n  }\n  return '';\n};\n\n/** Returns the app name */\nconst ocmAppPath = `/${appname}`;\n\n/** Returns base path for this app */\nconst ocmBaseName = (): string => `${getBaseEnv()}/${appname}`;\n\n/** Returns base path for Insights Advisor app */\nconst advisorBaseName = (): string => `${getBaseEnv()}/openshift/insights/advisor`;\n\n/**\n * Removes the basename from the beginning of a path\n * @param {string} path\n */\nconst ocmBaseNameRegexp = new RegExp(`^(/preview|/beta|)/${appname}`, 'i');\n\nconst removeOcmBaseName = (path: string): string => path.replace(ocmBaseNameRegexp, '');\n\nconst getResourcesBase = (): string => (APP_BETA ? `/beta/apps/${appname}` : `/apps/${appname}`);\n\nexport { advisorBaseName, getResourcesBase, ocmAppPath, removeOcmBaseName };\n\nexport default ocmBaseName;\n","/*\nThe Insights Platform delegates menu highlighting resposibility to OCM.\nThis file contain a function mapping OCM paths to Insights Platform `appNavClick` parameters.\nThis is used both for in-app navigation (see app/Insights.jsx) or on-load (see main.jsx)\n*/\n\nimport { removeOcmBaseName } from './getBaseName';\n\n/**\n * Get parameters for `appNavClick` based on the provided path.\n * @param {string} pathname target path\n * */\nexport default function getNavClickParams(pathname: string) {\n  const cleanPathName = removeOcmBaseName(pathname).replace(/^\\//, '');\n  const components = cleanPathName.split('/');\n\n  // The `id` and `parentId` below correspond to current navigation structure\n  // https://github.com/cben/cloud-services-config/blob/prod-stable/main.yml\n  // TODO: will things change with new upcoming json format?\n  // https://github.com/cben/cloud-services-config/blob/ci-beta/chrome/openshift-navigation.json\n  switch (components[0]) {\n    case 'downloads':\n    case 'token':\n      return { id: 'downloads' };\n\n    case 'quota':\n      return {\n        id: components[1] || 'openshift-quota',\n        parentId: 'subscriptions',\n        secondaryNav: true,\n      };\n\n    // These belong to \"appId\": \"subscriptions\" but important not to send them to \"Clusters\"\n    case 'subscriptions':\n      return {\n        id: components[1],\n        parentId: 'subscriptions',\n        secondaryNav: true,\n      };\n\n    // Regular 1:1 cases.\n    case 'overview':\n    case 'releases':\n      return { id: components[0] };\n\n    // Too many cluster-related pages to list ('', 'details', 'archived', 'create', 'register'...)\n    default:\n      return { id: '' }; // \"Clusters\"\n  }\n}\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport { Routes as AssistedInstallerRoutes } from '@openshift-assisted/ui-lib/ocm';\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport { ConnectedRouter } from 'connected-react-router';\nimport get from 'lodash/get';\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  Switch,\n  useLocation,\n  withRouter,\n} from 'react-router-dom';\nimport { useFeatureGate } from '~/hooks/useFeatureGate';\nimport { normalizedProducts } from '../../common/subscriptionTypes';\nimport {\n  ASSISTED_INSTALLER_FEATURE,\n  HYPERSHIFT_WIZARD_FEATURE,\n} from '../../redux/constants/featureConstants';\nimport apiRequest from '../../services/apiRequest';\nimport ArchivedClusterList from '../clusters/ArchivedClusterList';\nimport ClusterDetailsClusterOrExternalId from '../clusters/ClusterDetails/ClusterDetailsClusterOrExternalId';\nimport ClusterDetailsSubscriptionId from '../clusters/ClusterDetails/ClusterDetailsSubscriptionId';\nimport IdentityProvidersPage from '../clusters/ClusterDetails/components/IdentityProvidersPage';\nimport ClustersList from '../clusters/ClusterList';\nimport CreateClusterPage from '../clusters/CreateClusterPage';\nimport CreateROSAWizard from '../clusters/CreateROSAPage/CreateROSAWizard';\nimport GetStartedWithROSA from '../clusters/CreateROSAPage/CreateROSAWizard/CreateRosaGetStarted';\nimport InsightsAdvisorRedirector from '../clusters/InsightsAdvisorRedirector';\nimport RegisterCluster from '../clusters/RegisterCluster';\nimport InstallASH from '../clusters/install/InstallASH';\nimport ConnectedInstallASHIPI from '../clusters/install/InstallASHIPI';\nimport ConnectedInstallASHUPI from '../clusters/install/InstallASHUPI';\nimport InstallAWS from '../clusters/install/InstallAWS';\nimport ConnectedInstallAWSIPI from '../clusters/install/InstallAWSIPI';\nimport ConnectedInstallAWSUPI from '../clusters/install/InstallAWSUPI';\nimport ConnectedInstallAlibaba from '../clusters/install/InstallAlibaba';\nimport InstallArmAWS from '../clusters/install/InstallArmAWS';\nimport ConnectedInstallArmAWSIPI from '../clusters/install/InstallArmAWSIPI';\nimport ConnectedInstallArmAWSUPI from '../clusters/install/InstallArmAWSUPI';\nimport ConnectedInstallArmAzureIPI from '../clusters/install/InstallArmAzureIPI';\nimport InstallArmBareMetal from '../clusters/install/InstallArmBareMetal';\nimport InstallArmBMIPI from '../clusters/install/InstallArmBareMetalIPI';\nimport InstallArmBMUPI from '../clusters/install/InstallArmBareMetalUPI';\nimport ConnectedInstallArmPreRelease from '../clusters/install/InstallArmPreRelease';\nimport InstallAzure from '../clusters/install/InstallAzure';\nimport ConnectedInstallAzureIPI from '../clusters/install/InstallAzureIPI';\nimport ConnectedInstallAzureUPI from '../clusters/install/InstallAzureUPI';\nimport InstallBareMetal from '../clusters/install/InstallBareMetal';\nimport InstallBMABI from '../clusters/install/InstallBareMetalABI';\nimport InstallBMIPI from '../clusters/install/InstallBareMetalIPI';\nimport InstallBMUPI from '../clusters/install/InstallBareMetalUPI';\nimport InstallGCP from '../clusters/install/InstallGCP';\nimport ConnectedInstallGCPIPI from '../clusters/install/InstallGCPIPI';\nimport ConnectedInstallGCPUPI from '../clusters/install/InstallGCPUPI';\nimport ConnectedInstallIBMCloud from '../clusters/install/InstallIBMCloud';\nimport InstallIBMZ from '../clusters/install/InstallIBMZ';\nimport ConnectedInstallIBMZPreRelease from '../clusters/install/InstallIBMZPreRelease';\nimport ConnectedInstallIBMZUPI from '../clusters/install/InstallIBMZUPI';\nimport ConnectedInstallMultiAWSIPI from '../clusters/install/InstallMultiAWSIPI';\nimport ConnectedInstallMultiAzureIPI from '../clusters/install/InstallMultiAzureIPI';\nimport InstallMultiBMUPI from '../clusters/install/InstallMultiBareMetalUPI';\nimport ConnectedInstallMultiPreRelease from '../clusters/install/InstallMultiPreRelease';\nimport InstallNutanix from '../clusters/install/InstallNutanix';\nimport ConnectedInstallNutanixIPI from '../clusters/install/InstallNutanixIPI';\nimport InstallOSP from '../clusters/install/InstallOSP';\nimport ConnectedInstallOSPIPI from '../clusters/install/InstallOSPIPI';\nimport ConnectedInstallOSPUPI from '../clusters/install/InstallOSPUPI';\nimport InstallPlatformAgnostic from '../clusters/install/InstallPlatformAgnostic';\nimport ConnectedInstallPlatformAgnosticABI from '../clusters/install/InstallPlatformAgnosticABI';\nimport ConnectedInstallPlatformAgnosticUPI from '../clusters/install/InstallPlatformAgnosticUPI';\nimport InstallPower from '../clusters/install/InstallPower';\nimport ConnectedInstallPowerPreRelease from '../clusters/install/InstallPowerPreRelease';\nimport ConnectedInstallPowerUPI from '../clusters/install/InstallPowerUPI';\nimport InstallPowerVSIPI from '../clusters/install/InstallPowerVirtualServerIPI';\nimport ConnectedInstallPreRelease from '../clusters/install/InstallPreRelease';\nimport ConnectedInstallPullSecret from '../clusters/install/InstallPullSecret';\nimport ConnectedInstallPullSecretAzure from '../clusters/install/InstallPullSecretAzure';\nimport InstallRHV from '../clusters/install/InstallRHV';\nimport ConnectedInstallRHVIPI from '../clusters/install/InstallRHVIPI';\nimport ConnectedInstallRHVUPI from '../clusters/install/InstallRHVUPI';\nimport InstallVSphere from '../clusters/install/InstallVSphere';\nimport ConnectedInstallVSphereABI from '../clusters/install/InstallVSphereABI';\nimport ConnectedInstallVSphereIPI from '../clusters/install/InstallVSphereIPI';\nimport ConnectedInstallVSphereUPI from '../clusters/install/InstallVSphereUPI';\nimport { CreateOsdWizard } from '../clusters/wizards';\nimport EntitlementConfig from '../common/EntitlementConfig/index';\nimport DownloadsPage from '../downloads/DownloadsPage';\nimport withFeatureGate from '../features/with-feature-gate';\nimport Overview from '../overview';\nimport Quota from '../quota';\nimport Releases from '../releases/index';\nimport Tokens from '../tokens';\nimport TokensROSA from '../tokens/TokensROSA';\nimport ApiError from './ApiError';\nimport { AppPage } from './AppPage';\nimport GovCloudPage from '../clusters/GovCloud/GovCloudPage';\nimport RosaServicePageEmptyState from '../services/rosa/RosaServicePageEmptyState';\nimport Insights from './Insights';\nimport NotFoundError from './NotFoundError';\nimport TermsGuardedRoute from './TermsGuardedRoute';\nimport { is404, metadataByRoute } from './routeMetadata';\n\nconst AssistedUiRouterPage: typeof AssistedInstallerRoutes = (props) => (\n  <AppPage>\n    <AssistedInstallerRoutes {...props} />\n  </AppPage>\n);\n\nconst GatedAssistedUiRouter = withFeatureGate(AssistedUiRouterPage, ASSISTED_INSTALLER_FEATURE);\nconst GatedMetalInstall = withFeatureGate(\n  InstallBareMetal,\n  ASSISTED_INSTALLER_FEATURE,\n  // TODO remove ts-ignore when `withFeatureGate` and InstallBMUPI are converted to typescript\n  // @ts-ignore\n  InstallBMUPI, // InstallBMIPI,\n);\ninterface RouterProps extends RouteComponentProps {\n  planType: string;\n  clusterId: string;\n  externalClusterId: string;\n}\n\nconst Router: React.FC<RouterProps> = ({ history, planType, clusterId, externalClusterId }) => {\n  const { pathname } = useLocation();\n\n  const {\n    segment: { setPageMetadata },\n  } = useChrome();\n\n  const isHypershiftWizardEnabled = useFeatureGate(HYPERSHIFT_WIZARD_FEATURE);\n\n  // For testing purposes, show which major features are enabled/disabled\n  React.useEffect(() => {\n    // eslint-disable-next-line no-console\n    console.info(\n      '---------------Features---------------\\n',\n      `HYPERSHIFT_WIZARD_FEATURE: ${isHypershiftWizardEnabled ? 'Enabled' : 'Disabled'}\\n`,\n      '-------------------------------------',\n    );\n  }, [isHypershiftWizardEnabled]);\n\n  useEffect(() => {\n    setPageMetadata({\n      ...metadataByRoute(pathname, planType, clusterId, externalClusterId),\n      ...(is404() ? { title: '404 Not Found' } : {}),\n    });\n  }, [pathname, planType, clusterId, externalClusterId, setPageMetadata]);\n\n  return (\n    <>\n      <Insights />\n      <ConnectedRouter history={history}>\n        <ApiError apiRequest={apiRequest}>\n          <Switch>\n            {/*\n              IMPORTANT!\n              When adding new routes, make sure to add the route both here and in Router.test.jsx,\n              to ensure the route is tested.\n\n              When adding new top-level entries to left navigation, see also getNavClickParams.js.\n            */}\n            <Redirect\n              from=\"/install/osp/installer-provisioned\"\n              to=\"/install/openstack/installer-provisioned\"\n            />\n            <Redirect from=\"/install/crc/installer-provisioned\" to=\"/create/local\" />\n            <Redirect from=\"/token/moa\" to=\"/token/rosa\" />\n            <Redirect from=\"/insights\" to=\"/overview\" />\n            <Redirect from=\"/subscriptions\" to=\"/quota\" />\n            <Route path=\"/downloads\" component={DownloadsPage} />\n\n            {/* Each token page has 2 routes with distinct paths, to remember that user wanted\n                to see it during page reload that may be needed for elevated auth. */}\n            <TermsGuardedRoute\n              path=\"/token/rosa/show\"\n              history={history}\n              render={() => (\n                <AppPage>\n                  <TokensROSA show />\n                  <EntitlementConfig />\n                </AppPage>\n              )}\n            />\n            <TermsGuardedRoute\n              path=\"/token/rosa\"\n              history={history}\n              render={() => (\n                <AppPage>\n                  <TokensROSA show={false} showPath=\"/token/rosa/show\" />\n                  <EntitlementConfig />\n                </AppPage>\n              )}\n            />\n            <Route path=\"/token/show\" render={() => <Tokens show />} />\n            <Route path=\"/token\" render={() => <Tokens show={false} showPath=\"/token/show\" />} />\n\n            <Route\n              path=\"/install/alibaba/installer-provisioned\"\n              component={ConnectedInstallAlibaba}\n            />\n            <Route path=\"/install/arm/installer-provisioned\" component={InstallArmBMIPI} />\n            <Route path=\"/install/arm/user-provisioned\" component={InstallArmBMUPI} />\n            <Route path=\"/install/arm/pre-release\" component={ConnectedInstallArmPreRelease} />\n            <Route path=\"/install/arm\" component={InstallArmBareMetal} />\n            <Route path=\"/install/aws/installer-provisioned\" component={ConnectedInstallAWSIPI} />\n            <Route path=\"/install/aws/user-provisioned\" component={ConnectedInstallAWSUPI} />\n            <Route\n              path=\"/install/aws/arm/installer-provisioned\"\n              component={ConnectedInstallArmAWSIPI}\n            />\n            <Route path=\"/install/aws/arm/user-provisioned\" component={ConnectedInstallArmAWSUPI} />\n            <Route path=\"/install/aws/arm\" component={InstallArmAWS} />\n            <Route\n              path=\"/install/aws/multi/installer-provisioned\"\n              component={ConnectedInstallMultiAWSIPI}\n            />\n            <Route path=\"/install/aws\" component={InstallAWS} />\n            <Route path=\"/install/gcp/installer-provisioned\" component={ConnectedInstallGCPIPI} />\n            <Route path=\"/install/gcp/user-provisioned\" component={ConnectedInstallGCPUPI} />\n            <Route path=\"/install/gcp\" component={InstallGCP} />\n            <Route path=\"/install/nutanix\" exact component={InstallNutanix} />\n            <Route\n              path=\"/install/nutanix/installer-provisioned\"\n              component={ConnectedInstallNutanixIPI}\n            />\n            <Route\n              path=\"/install/openstack/installer-provisioned\"\n              component={ConnectedInstallOSPIPI}\n            />\n            <Route path=\"/install/openstack/user-provisioned\" component={ConnectedInstallOSPUPI} />\n            <Route path=\"/install/openstack\" component={InstallOSP} />\n            <Route path=\"/install/rhv/installer-provisioned\" component={ConnectedInstallRHVIPI} />\n            <Route path=\"/install/rhv/user-provisioned\" component={ConnectedInstallRHVUPI} />\n            <Route path=\"/install/rhv\" component={InstallRHV} />\n            <Route\n              path=\"/install/azure/arm/installer-provisioned\"\n              component={ConnectedInstallArmAzureIPI}\n            />\n            <Route\n              path=\"/install/azure/multi/installer-provisioned\"\n              component={ConnectedInstallMultiAzureIPI}\n            />\n            <Route\n              path=\"/install/azure/installer-provisioned\"\n              component={ConnectedInstallAzureIPI}\n            />\n            <Route path=\"/install/azure/user-provisioned\" component={ConnectedInstallAzureUPI} />\n            <Route path=\"/install/azure\" exact component={InstallAzure} />\n            <Route\n              path=\"/install/azure-stack-hub/installer-provisioned\"\n              exact\n              component={ConnectedInstallASHIPI}\n            />\n            <Route\n              path=\"/install/azure-stack-hub/user-provisioned\"\n              exact\n              component={ConnectedInstallASHUPI}\n            />\n            <Route path=\"/install/azure-stack-hub\" exact component={InstallASH} />\n            <Route path=\"/install/metal/user-provisioned\" component={InstallBMUPI} />\n            <Route path=\"/install/metal/installer-provisioned\" component={InstallBMIPI} />\n            <Route path=\"/install/metal/agent-based\" component={InstallBMABI} />\n            <Route path=\"/install/metal/multi\" component={InstallMultiBMUPI} />\n            <Route path=\"/install/metal\" component={GatedMetalInstall} />\n            <Route path=\"/install/multi/pre-release\" component={ConnectedInstallMultiPreRelease} />\n            <Route path=\"/install/vsphere\" exact component={InstallVSphere} />\n            <Route path=\"/install/vsphere/agent-based\" component={ConnectedInstallVSphereABI} />\n            <Route\n              path=\"/install/vsphere/user-provisioned\"\n              component={ConnectedInstallVSphereUPI}\n            />\n            <Route\n              path=\"/install/vsphere/installer-provisioned\"\n              component={ConnectedInstallVSphereIPI}\n            />\n            <Route path=\"/install/ibm-cloud\" component={ConnectedInstallIBMCloud} />\n            <Route path=\"/install/ibmz/user-provisioned\" component={ConnectedInstallIBMZUPI} />\n            <Route path=\"/install/ibmz/pre-release\" component={ConnectedInstallIBMZPreRelease} />\n            <Route path=\"/install/ibmz\" exact component={InstallIBMZ} />\n            <Route path=\"/install/power/user-provisioned\" component={ConnectedInstallPowerUPI} />\n            <Route path=\"/install/power/pre-release\" component={ConnectedInstallPowerPreRelease} />\n            <Route path=\"/install/power\" exact component={InstallPower} />\n            <Route path=\"/install/powervs/installer-provisioned\" component={InstallPowerVSIPI} />\n            <Route\n              path=\"/install/platform-agnostic/agent-based\"\n              component={ConnectedInstallPlatformAgnosticABI}\n            />\n            <Route\n              path=\"/install/platform-agnostic/user-provisioned\"\n              component={ConnectedInstallPlatformAgnosticUPI}\n            />\n            <Route path=\"/install/platform-agnostic\" component={InstallPlatformAgnostic} />\n            <Route path=\"/install/pre-release\" component={ConnectedInstallPreRelease} />\n            <Route path=\"/install/pull-secret\" component={ConnectedInstallPullSecret} />\n            <Route\n              path=\"/install/azure/aro-provisioned\"\n              component={ConnectedInstallPullSecretAzure}\n            />\n            <Redirect from=\"/install\" to=\"/create\" />\n            <Redirect from=\"/create/osd/aws\" to=\"/create/osd\" />\n            <Redirect from=\"/create/osd/gcp\" to=\"/create/osd\" />\n            <Redirect from=\"/create/osdtrial/aws\" to=\"/create/osdtrial\" />\n            <Redirect from=\"/create/osdtrial/gcp\" to=\"/create/osdtrial\" />\n            <TermsGuardedRoute\n              path=\"/create/osdtrial\"\n              gobackPath=\"/create\"\n              render={() => <CreateOsdWizard product={normalizedProducts.OSDTrial} />}\n              history={history}\n            />\n            <TermsGuardedRoute\n              path=\"/create/osd\"\n              gobackPath=\"/create\"\n              component={CreateOsdWizard}\n              history={history}\n            />\n            <Route\n              path=\"/create/cloud\"\n              render={(props) => <CreateClusterPage activeTab=\"cloud\" {...props} />}\n            />\n            <Route\n              path=\"/create/datacenter\"\n              render={(props) => <CreateClusterPage activeTab=\"datacenter\" {...props} />}\n            />\n            <Route\n              path=\"/create/local\"\n              render={(props) => <CreateClusterPage activeTab=\"local\" {...props} />}\n            />\n\n            <Redirect from=\"/create/rosa/welcome\" to=\"/create/rosa/getstarted\" />\n            <TermsGuardedRoute\n              path=\"/create/rosa/getstarted\"\n              history={history}\n              component={GetStartedWithROSA}\n            />\n            <Route path=\"/create/rosa/govcloud\" component={GovCloudPage} />\n\n            <TermsGuardedRoute\n              path=\"/create/rosa/wizard\"\n              history={history}\n              component={CreateROSAWizard}\n            />\n\n            <Route path=\"/create\" component={CreateClusterPage} />\n\n            <Route\n              path=\"/details/s/:id/insights/:reportId/:errorKey\"\n              component={InsightsAdvisorRedirector}\n            />\n            <Route path=\"/details/s/:id/add-idp/:idpTypeName\" component={IdentityProvidersPage} />\n            <Route\n              path=\"/details/s/:id/edit-idp/:idpName\"\n              render={({ match }) => <IdentityProvidersPage isEditForm match={match} />}\n            />\n            <Route path=\"/details/s/:id\" component={ClusterDetailsSubscriptionId} />\n            <Route\n              path=\"/details/:id/insights/:reportId/:errorKey\"\n              component={InsightsAdvisorRedirector}\n            />\n            <Route path=\"/details/:id\" component={ClusterDetailsClusterOrExternalId} />\n            <Route path=\"/register\" component={RegisterCluster} />\n            <Route path=\"/quota/resource-limits\" render={() => <Quota marketplace />} />\n            <Route path=\"/quota\" component={Quota} />\n            <Route path=\"/archived\" component={ArchivedClusterList} />\n            <Route path=\"/overview\" exact component={Overview} />\n            <Route path=\"/releases\" exact component={Releases} />\n            <Route path=\"/assisted-installer\" component={GatedAssistedUiRouter} />\n            <Route path=\"/services/rosa\" component={RosaServicePageEmptyState} />\n            <Route path=\"/\" exact component={ClustersList} />\n            <Route component={NotFoundError} />\n          </Switch>\n        </ApiError>\n      </ConnectedRouter>\n    </>\n  );\n};\n\ntype RouterState = {\n  clusters: any;\n};\nconst mapStateToProps = (state: RouterState) => {\n  const { cluster } = state.clusters.details;\n  return {\n    planType: get(cluster, 'subscription.plan.type', normalizedProducts.UNKNOWN),\n    clusterId: get(cluster, 'subscription.cluster_id'),\n    externalClusterId: get(cluster, 'subscription.external_cluster_id'),\n  };\n};\n\nexport default connect(mapStateToProps)(withRouter(Router));\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport './i18n';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\n// No type definitions\n// @ts-ignore\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nimport * as Sentry from '@sentry/browser';\nimport { SessionTiming } from '@sentry/integrations';\n\nimport * as OCM from '@openshift-assisted/ui-lib/ocm';\n\nimport config from './config';\n\nimport getNavClickParams from './common/getNavClickParams';\nimport ocmBaseName from './common/getBaseName';\n\nimport { userInfoResponse } from './redux/actions/userActions';\nimport { detectFeatures } from './redux/actions/featureActions';\n\nimport { store } from './redux/store';\nimport { authInterceptor } from './services/apiRequest';\n\nimport App from './components/App/App';\nimport type { AppThunkDispatch } from './redux/types';\n\nimport './styles/main.scss';\n\nconst { Api, Config } = OCM;\n\n/**\n * Assisted Installer configuration\n *\n * We need to pass axios auth interceptor so every request from AI has proper headers.\n *\n * We also need to set the route base path for the internal AI routing to work properly.\n */\nApi.setAuthInterceptor(authInterceptor);\nConfig.setRouteBasePath('/assisted-installer');\n\n// Chrome 2.0 renders this\nclass AppEntry extends React.Component {\n  state = { ready: false };\n\n  componentDidMount() {\n    insights.chrome.init();\n    insights.chrome.identifyApp('').then(() => {\n      insights.chrome.appNavClick(getNavClickParams(window.location.pathname));\n    });\n    insights.chrome.auth.getUser().then((data) => {\n      if (data?.identity?.user) {\n        store.dispatch(userInfoResponse(data.identity.user));\n      }\n      config.fetchConfig().then(() => {\n        (store.dispatch as AppThunkDispatch)(detectFeatures());\n        this.setState({ ready: true });\n        if (!config.envOverride && config.configData.sentryDSN) {\n          Sentry.init({\n            dsn: config.configData.sentryDSN,\n            integrations: [\n              new SessionTiming(),\n              new Sentry.Integrations.GlobalHandlers({\n                onerror: true,\n                onunhandledrejection: false,\n              }),\n            ],\n          });\n          if (data?.identity?.user) {\n            const { email, username } = data.identity.user;\n            // add user info to Sentry\n            Sentry.configureScope((scope) => {\n              scope.setUser({ email, username });\n            });\n          }\n        }\n      });\n    });\n\n    if (\n      // app is running in local development\n      APP_DEV_SERVER ||\n      // app is not built in production mode\n      APP_DEVMODE ||\n      // build is not deployed in a production environment\n      APP_API_ENV !== 'production'\n    ) {\n      insights.chrome.enable.segmentDev();\n    }\n  }\n\n  render() {\n    const { ready } = this.state;\n    if (ready) {\n      // HACK: react-router only looks at `basename` prop once on initialization, so this is\n      //    fragile if we later jump between /preview & /beta.\n      const basename = ocmBaseName();\n\n      return (\n        <Provider store={store}>\n          <NotificationPortal />\n          <BrowserRouter\n            basename={basename}\n            getUserConfirmation={() => {\n              /* Block the default browser prompt (window.confirm). */\n            }}\n          >\n            <App />\n          </BrowserRouter>\n        </Provider>\n      );\n    }\n    return null;\n  }\n}\nexport default AppEntry;\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport fromEntries from 'object.fromentries';\nimport AppEntry from './chrome-main';\n\nif (!Object.fromEntries) {\n  fromEntries.shim();\n}\n\nconst renderDevEnvError = () => {\n  ReactDOM.render(\n    <div style={{ margin: '25px' }}>\n      <h1>Development environment error</h1>\n      <h2>You&apos;re accessing the webpack dev server directly</h2>\n      <p>This app is designed to run within the Insights Chrome, and can&apos;t run without it.</p>\n      <p>\n        If you&apos;re already running the Insights Chrome Proxy, you just got the URL wrong.{' '}\n        <a href=\"https://qa.foo.redhat.com:1337/openshift\">Click here to access the app.</a>\n      </p>\n      <p>\n        If you don&apos;t know what the Insights Chrome Proxy is or how to run it, consult README.md\n        and README-tldr.md\n      </p>\n    </div>,\n    document.body,\n  );\n};\n\nconst renderUnsupportedEnvError = () => {\n  ReactDOM.render(\n    <div style={{ margin: '25px' }}>\n      <h1>Unsupported environment</h1>\n      <h2>OCM does not support this environment</h2>\n      <p>Please use one of our supported environments.</p>\n      <p>OCM is only being deployed to this environment to ensure navigation keeps working.</p>\n    </div>,\n    document.getElementById('root'),\n  );\n};\n\nif (!window.insights && APP_DEV_SERVER) {\n  // we don't want this info to ever be complied to the prod build,\n  // so I made sure it's only ever called in development mode\n  renderDevEnvError();\n} else if (APP_API_ENV === 'disabled') {\n  // This is a build for an environment we don't support. render an error.\n  renderUnsupportedEnvError();\n} else {\n  ReactDOM.render(<AppEntry />, document.getElementById('root'));\n}\n","import { action, ActionType } from 'typesafe-actions';\nimport { Capability } from '~/types/accounts_mgmt.v1/models/Capability';\nimport {\n  SET_FEATURE,\n  ASSISTED_INSTALLER_PLATFORM_OCI,\n  ASSISTED_INSTALLER_FEATURE,\n  ASSISTED_INSTALLER_MERGE_LISTS_FEATURE,\n  HYPERSHIFT_WIZARD_FEATURE,\n  OSD_GOOGLE_MARKETPLACE_FEATURE,\n  HCP_ROSA_GETTING_STARTED_PAGE,\n  HCP_AWS_BILLING_SHOW,\n  HCP_AWS_BILLING_REQUIRED,\n} from '../constants/featureConstants';\nimport authorizationsService from '../../services/authorizationsService';\nimport accountsService from '../../services/accountsService';\nimport { SelfAccessReview } from '../../types/authorizations.v1/models/SelfAccessReview';\nimport type { AppThunk } from '../types';\n\nexport const setFeatureAction = (feature: string, enabled: boolean) =>\n  action(SET_FEATURE, { feature, enabled });\n\nconst getSimpleUnleashFeature = (unleashFeatureName: string, name: string) => ({\n  name,\n  action: () =>\n    authorizationsService\n      .selfFeatureReview(unleashFeatureName)\n      .then((unleash) => unleash.data.enabled),\n});\n\ntype MapCapabilityToAssistedInstallerFeatureFunc = {\n  (capabilityName: string): Promise<boolean>;\n  cache?: Map<string, Capability[]>;\n};\n\nconst mapCapabilityToAssistedInstallerFeature: MapCapabilityToAssistedInstallerFeatureFunc = async (\n  capabilityName: string,\n) => {\n  if (!mapCapabilityToAssistedInstallerFeature.cache) {\n    mapCapabilityToAssistedInstallerFeature.cache = new Map();\n  }\n\n  let isFeatureEnabled = false;\n  const response = await accountsService.getCurrentAccount();\n  const userOrganizationId = response.data?.organization?.id;\n  if (userOrganizationId) {\n    if (!mapCapabilityToAssistedInstallerFeature.cache.has(userOrganizationId)) {\n      const organizationResponse = await accountsService.getOrganization(userOrganizationId);\n      const organization = organizationResponse.data;\n      mapCapabilityToAssistedInstallerFeature.cache.set(\n        userOrganizationId,\n        JSON.parse(JSON.stringify(organization.capabilities ?? [])) as Capability[],\n      );\n    }\n\n    const capabilities = mapCapabilityToAssistedInstallerFeature.cache.get(userOrganizationId);\n    const capabilityEntry = capabilities?.find(({ name }) => name === capabilityName);\n    isFeatureEnabled = capabilityEntry?.value === 'true';\n  }\n\n  return isFeatureEnabled;\n};\n\n// list of features to detect upon app startup\nexport const features = [\n  getSimpleUnleashFeature('hypershift-creation-wizard', HYPERSHIFT_WIZARD_FEATURE),\n  getSimpleUnleashFeature('hcp-rosa-getting-started-page', HCP_ROSA_GETTING_STARTED_PAGE),\n  getSimpleUnleashFeature('hcp-aws-billing-show', HCP_AWS_BILLING_SHOW),\n  getSimpleUnleashFeature('hcp-aws-billing-required', HCP_AWS_BILLING_REQUIRED),\n  getSimpleUnleashFeature('assisted-installer-merge-lists', ASSISTED_INSTALLER_MERGE_LISTS_FEATURE),\n  getSimpleUnleashFeature('osd-google-marketplace', OSD_GOOGLE_MARKETPLACE_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-merge-lists', ASSISTED_INSTALLER_MERGE_LISTS_FEATURE),\n  {\n    name: ASSISTED_INSTALLER_FEATURE,\n    action: () =>\n      Promise.all([\n        authorizationsService.selfAccessReview({\n          action: SelfAccessReview.action.CREATE,\n          // @ts-ignore 'BareMetalCluster' does not exist on SelfAccessReview.resource_type\n          resource_type: 'BareMetalCluster',\n        }),\n        authorizationsService.selfFeatureReview('assisted-installer'),\n      ]).then(([resource, unleash]) => resource.data.allowed && unleash.data.enabled),\n  },\n  {\n    name: ASSISTED_INSTALLER_PLATFORM_OCI,\n    action: async () =>\n      mapCapabilityToAssistedInstallerFeature(\n        'capability.organization.bare_metal_installer_platform_oci',\n      ),\n  },\n];\n\nexport const detectFeatures = (): AppThunk => (dispatch) => {\n  features.forEach(({ name, action: featureAction }) =>\n    featureAction()\n      .then((enabled) => dispatch(setFeatureAction(name, enabled)))\n      .catch(() => dispatch(setFeatureAction(name, false))),\n  );\n};\n\nexport type FeatureAction = ActionType<typeof setFeatureAction>;\n","import { action, ActionType } from 'typesafe-actions';\nimport type { AxiosResponse } from 'axios';\nimport { userConstants } from '../constants';\nimport { accountsService, authorizationsService } from '../../services';\nimport { normalizeQuotaCost } from '../../common/normalize';\nimport type { QuotaCostList, Organization, QuotaCost } from '../../types/accounts_mgmt.v1';\nimport type { UserInfo } from '../../types/types';\nimport type { AppThunk } from '../types';\n\nconst userInfoResponse = (payload: UserInfo) => action(userConstants.USER_INFO_RESPONSE, payload);\n\n/** Normalize incoming quota. */\nconst processQuota = (\n  response: AxiosResponse<QuotaCostList>,\n): {\n  items?: QuotaCost[] | undefined;\n} => ({\n  items: (response.data?.items ?? []).map(normalizeQuotaCost),\n});\n\nconst fetchQuota = (organizationID: string) =>\n  accountsService.getOrganizationQuota(organizationID).then(processQuota);\n\nconst fetchQuotaAndOrganization = (\n  organizationID: string,\n  organization?: Organization,\n): Promise<{ quota: { items?: QuotaCost[] }; organization: Organization }> => {\n  const promises: [ReturnType<typeof fetchQuota>, Promise<{ data: Organization }>] = [\n    fetchQuota(organizationID),\n    organization\n      ? Promise.resolve({ data: organization })\n      : accountsService.getOrganization(organizationID),\n  ];\n  return Promise.all(promises).then(([quota, organizationResponse]) => ({\n    quota,\n    organization: organizationResponse.data,\n  }));\n};\n\nconst fetchAccountThenQuotaAndOrganization = () =>\n  accountsService.getCurrentAccount().then((response) => {\n    const organizationID = response.data?.organization?.id;\n    return organizationID !== undefined\n      ? fetchQuotaAndOrganization(organizationID)\n      : Promise.reject(Error('No organization'));\n  });\n\nconst getOrganizationAndQuotaAction = (\n  payload: Promise<{ quota: { items?: QuotaCost[] }; organization: Organization }>,\n) => action(userConstants.GET_ORGANIZATION, payload);\n\nconst getOrganizationAndQuota = (): AppThunk => (dispatch, getState) => {\n  const { userProfile } = getState();\n  const organizationDetails = userProfile?.organization.fulfilled\n    ? userProfile?.organization?.details\n    : undefined;\n  const organizationID = organizationDetails?.id;\n  dispatch(\n    getOrganizationAndQuotaAction(\n      organizationID !== undefined\n        ? fetchQuotaAndOrganization(organizationID, organizationDetails)\n        : fetchAccountThenQuotaAndOrganization(),\n    ),\n  );\n};\n\nconst selfTermsReview = () =>\n  action(userConstants.SELF_TERMS_REVIEW, authorizationsService.selfTermsReview());\n\nconst userActions = {\n  userInfoResponse,\n  getOrganizationAndQuota,\n  processQuota,\n  selfTermsReview,\n};\n\ntype UserAction = ActionType<\n  typeof userInfoResponse | typeof getOrganizationAndQuotaAction | typeof selfTermsReview\n>;\n\nexport { userActions, userInfoResponse, getOrganizationAndQuota, selfTermsReview, UserAction };\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\n// TODO'@redhat-cloud-services' modules implicitly have an 'any' type.\n// @ts-ignore\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nimport { reduxReducers } from './reducers';\nimport sentryMiddleware from './sentryMiddleware';\nimport promiseRejectionMiddleware from './promiseRejectionMiddleware';\n\ndeclare global {\n  interface Window {\n    __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n  }\n}\n\nconst defaultOptions = {\n  dispatchDefaultFailure: false, // automatic error notifications\n};\nconst history = createBrowserHistory();\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reduxReducers(history),\n  composeEnhancer(\n    applyMiddleware(\n      routerMiddleware(history),\n      thunkMiddleware,\n      promiseRejectionMiddleware,\n      promiseMiddleware,\n      notificationsMiddleware({ ...defaultOptions }),\n      sentryMiddleware,\n    ),\n  ),\n);\n\nexport type GlobalState = Omit<ReturnType<typeof store.getState>, 'rosaReducer'> & {\n  // TODO temporary overrides for reducers that aren't written in typescript\n  rosaReducer: {\n    getAWSBillingAccountsResponse: any;\n    getAWSAccountIDsResponse: {\n      data: any[];\n    };\n    offlineToken?: string;\n  };\n};\n\nexport { store as default, store, history };\n"],"names":["insights","appname","getBaseEnv","window","location","pathname","startsWith","ocmAppPath","advisorBaseName","ocmBaseNameRegexp","RegExp","removeOcmBaseName","path","replace","getResourcesBase","getNavClickParams","components","split","id","parentId","secondaryNav","GatedAssistedUiRouter","props","AppPage","ASSISTED_INSTALLER_FEATURE","GatedMetalInstall","InstallBareMetal","Api","Config","connect","state","cluster","clusters","details","planType","normalizedProducts","clusterId","externalClusterId","history","segment","setPageMetadata","useChrome","isHypershiftWizardEnabled","useFeatureGate","HYPERSHIFT_WIZARD_FEATURE","console","info","useEffect","title","Insights","ApiError","apiRequest","from","to","component","DownloadsPage","TermsGuardedRoute","render","TokensROSA","show","EntitlementConfig","showPath","InstallArmBareMetal","InstallArmAWS","InstallAWS","InstallGCP","exact","InstallNutanix","InstallOSP","InstallRHV","InstallAzure","InstallASH","InstallVSphere","InstallIBMZ","InstallPower","InstallPlatformAgnostic","gobackPath","product","CreateClusterPage","activeTab","GovCloudPage","CreateROSAWizard","InsightsAdvisorRedirector","IdentityProvidersPage","match","isEditForm","ClusterDetailsSubscriptionId","ClusterDetailsClusterOrExternalId","RegisterCluster","marketplace","ArchivedClusterList","RosaServicePageEmptyState","NotFoundError","setAuthInterceptor","setRouteBasePath","Object","fromEntries","style","margin","document","getElementById","getSimpleUnleashFeature","unleashFeatureName","name","action","then","unleash","data","enabled","mapCapabilityToAssistedInstallerFeature","capabilityName","cache","Map","isFeatureEnabled","userOrganizationId","organization","has","set","JSON","parse","stringify","capabilities","get","capabilityEntry","find","value","features","HCP_ROSA_GETTING_STARTED_PAGE","HCP_AWS_BILLING_SHOW","HCP_AWS_BILLING_REQUIRED","ASSISTED_INSTALLER_MERGE_LISTS_FEATURE","OSD_GOOGLE_MARKETPLACE_FEATURE","Promise","all","resource_type","resource","allowed","ASSISTED_INSTALLER_PLATFORM_OCI","userInfoResponse","payload","userConstants","processQuota","response","items","map","fetchQuota","organizationID","accountsService","fetchQuotaAndOrganization","promises","resolve","quota","organizationResponse","getOrganizationAndQuota","dispatch","getState","userProfile","organizationDetails","fulfilled","undefined","reject","Error","selfTermsReview","authorizationsService","userActions","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","dispatchDefaultFailure"],"sourceRoot":""}