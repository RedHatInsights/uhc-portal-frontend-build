{"version":3,"sources":["webpack://cloud.openshift.com/./src/common/getBaseName.js","webpack://cloud.openshift.com/./src/common/getNavClickParams.js","webpack://cloud.openshift.com/./src/components/App/App.jsx","webpack://cloud.openshift.com/./src/chrome-main.jsx","webpack://cloud.openshift.com/./src/main.jsx","webpack://cloud.openshift.com/./src/redux/actions/featureActions.js","webpack://cloud.openshift.com/./src/redux/actions/userActions.js"],"names":["insights","require","getBaseName","appname","removeBaseName","path","replace","RegExp","getNavClickParams","pathname","components","split","id","parentId","secondaryNav","App","children","config","EnvOverrideMessage","env","ErrorBoundary","Router","propTypes","PropTypes","connect","state","userProfile","Api","Config","OCM","setAuthInterceptor","authInterceptor","setRouteBasePath","React","window","ReactDOM","style","margin","document","getElementById","getSimpleUnleashFeature","unleashFeatureName","name","action","authorizationsService","then","unleash","data","enabled","features","OSD_TRIAL_FEATURE","ASSISTED_INSTALLER_SNO_FEATURE","ASSISTED_INSTALLER_OCS_FEATURE","ASSISTED_INSTALLER_CNV_FEATURE","ASSISTED_INSTALLER_MERGE_LISTS_FEATURE","ASSISTED_INSTALLER_NETWORK_TYPE_SELECTION_FEATURE","ASSISTED_INSTALLER_PLATFORM_INTEGRATION_FEATURE","OSD_CREATION_WIZARD_FEATURE","ASSISTED_INSTALLER_FEATURE","Promise","all","resource_type","resource","allowed","availableByCost","item","cost","Infinity","Math","floor","consumed","processClusterQuota","clustersQuota","resources","quota","available","forEach","availability_zone_type","availabilityZoneType","cloud_provider","cloudProvider","resource_name","machineType","product","quotaProduct","billing_model","quotaBilling","infraCategory","byoc","normalizedProducts","Object","entries","billing","billingQuota","productQuota","provider","providerQuota","category","categoryQuota","zoneType","zoneQuota","totalAvailable","isAvailable","processNodeQuota","nodesQuota","processStorageQuota","storageQuota","resourceName","processLoadBalancerQuota","loadBalancerQuota","processAddOnQuota","addOnsQuota","processQuota","response","allQuotas","emptyQuota","items","get","map","normalizeQuotaCost","length","fetchQuota","organizationID","accountsService","fetchQuotaAndOrganization","organization","ret","undefined","details","promises","push","fetchedOrganization","getOrganizationAndQuota","store","dispatch","payload","reject","Error","type","userConstants","selfTermsReview","userActions","userInfoResponse"],"mappings":"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","file":"bundle.63.c8850b5307029efaba26.js","sourcesContent":["const { insights } = require('../../package.json');\n\nfunction getBaseName() {\n  return APP_BETA ? `/beta/${insights.appname}` : `/${insights.appname}`;\n}\n\n/**\n * Removes the basename from the beginning of a path\n * @param {string} path\n */\nfunction removeBaseName(path) {\n  return path.replace(new RegExp(`^${getBaseName()}`, 'i'), '');\n}\n\nfunction getResourcesBase() {\n  return APP_BETA ? `/beta/apps/${insights.appname}` : `/apps/${insights.appname}`;\n}\n\nexport { getResourcesBase, removeBaseName };\n\nexport default getBaseName;\n","/*\nThe Insights Platform delegates menu highlighting resposibility to OCM.\nThis file contain a function mapping OCM paths to Insights Platform `appNavClick` parameters.\nThis is used both for in-app navigation (see app/Insights.jsx) or on-load (see main.jsx)\n*/\n\nimport { removeBaseName } from './getBaseName';\n\n/**\n * Get parameters for `appNavClick` based on the provided path.\n * @param {string} pathname target path\n* */\nexport default function getNavClickParams(pathname) {\n  const cleanPathName = removeBaseName(pathname).replace(/^\\//, '');\n  const components = cleanPathName.split('/');\n\n  // The `id` and `parentId` below correspond to current navigation structure\n  // https://github.com/cben/cloud-services-config/blob/prod-stable/main.yml\n  // TODO: will things change with new upcoming json format?\n  // https://github.com/cben/cloud-services-config/blob/ci-beta/chrome/openshift-navigation.json\n  switch (components[0]) {\n    case 'downloads':\n    case 'token':\n      return { id: 'downloads' };\n\n    case 'quota':\n      return {\n        id: components[1] || 'openshift-quota',\n        parentId: 'subscriptions',\n        secondaryNav: true,\n      };\n\n    // These belong to \"appId\": \"subscriptions\" but important not to send them to \"Clusters\"\n    case 'subscriptions':\n      return {\n        id: components[1],\n        parentId: 'subscriptions',\n        secondaryNav: true,\n      };\n\n    // Regular 1:1 cases.\n    case 'overview':\n    case 'releases':\n      return { id: components[0] };\n\n    // Too many cluster-related pages to list ('', 'details', 'archived', 'create', 'register'...)\n    default:\n      return { id: '' }; // \"Clusters\"\n  }\n}\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Router from './Router';\nimport ErrorBoundary from './ErrorBoundary';\nimport EnvOverrideMessage from './EnvOverrideMessage';\n\nimport config from '../../config';\n\nconst App = ({ children }) => (\n  <>\n    <span id=\"scrollToTop\" />\n    {config.override && <EnvOverrideMessage env={config.override} />}\n    <ErrorBoundary>\n      {children || <Router />}\n    </ErrorBoundary>\n  </>\n);\n\nApp.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n};\n\nconst mapStateToProps = state => ({\n  userProfile: state.userProfile,\n});\n\nexport default connect(mapStateToProps)(App);\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nimport * as Sentry from '@sentry/browser';\nimport { SessionTiming } from '@sentry/integrations';\n\nimport { OCM } from 'openshift-assisted-ui-lib';\n\nimport config from './config';\n\nimport getNavClickParams from './common/getNavClickParams';\nimport getBaseName from './common/getBaseName';\n\nimport { userInfoResponse } from './redux/actions/userActions';\nimport { detectFeatures } from './redux/actions/featureActions';\n\nimport { store } from './redux/store';\nimport { authInterceptor } from './services/apiRequest';\n\nimport App from './components/App/App';\n\nimport './styles/main.scss';\n\nconst { Api, Config } = OCM;\n\n/**\n * Assisted Installer configuration\n *\n * We need to pass axios auth interceptor so every request from AI has proper headers.\n *\n * We also need to set the route base path for the internal AI routing to work properly.\n */\nApi.setAuthInterceptor(authInterceptor);\nConfig.setRouteBasePath('/assisted-installer');\n\n// Chrome 2.0 renders this\nclass AppEntry extends React.Component {\n  state = { ready: false };\n\n  componentDidMount() {\n    insights.chrome.init();\n    insights.chrome.identifyApp('').then(() => {\n      insights.chrome.appNavClick(getNavClickParams(window.location.pathname));\n    });\n    insights.chrome.auth.getUser()\n      .then((data) => {\n        store.dispatch(userInfoResponse(data && data.identity && data.identity.user));\n        config.fetchConfig()\n          .then(() => {\n            store.dispatch(detectFeatures());\n            this.setState({ ready: true });\n            if (!config.override && config.configData.sentryDSN) {\n              Sentry.init({\n                dsn: config.configData.sentryDSN,\n                integrations: [\n                  new SessionTiming(),\n                  new Sentry.Integrations.GlobalHandlers({\n                    onerror: true,\n                    onunhandledrejection: false,\n                  }),\n                ],\n              });\n              if (data && data.identity && data.identity.user) {\n                // add user info to Sentry\n                Sentry.configureScope((scope) => {\n                  const { email, username } = data.identity.user;\n                  scope.setUser({ email, username });\n                });\n              }\n            }\n          });\n      });\n  }\n\n  render() {\n    const { ready } = this.state;\n    if (ready) {\n      return (\n        <Provider store={store}>\n          <NotificationPortal store={store} />\n          <BrowserRouter basename={getBaseName()}>\n            <App />\n          </BrowserRouter>\n        </Provider>\n      );\n    }\n    return null;\n  }\n}\nexport default AppEntry;\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './chrome-main';\n\nconst renderDevEnvError = () => {\n  ReactDOM.render(\n    <div style={{ margin: '25px' }}>\n      <h1>Development environment error</h1>\n      <h2>You&apos;re accessing the webpack dev server directly</h2>\n      <p>\n        This app is designed to run within the Insights Chrome, and can&apos;t run without it.\n      </p>\n      <p>\n        If you&apos;re already running the Insights Chrome Proxy, you just got the URL wrong.\n        {' '}\n        <a href=\"https://qa.foo.redhat.com:1337/openshift\">\n          Click here to access the app.\n        </a>\n      </p>\n      <p>\n        If you don&apos;t know what the Insights Chrome Proxy is or how to run it,\n        {' '}\n        consult README.md and README-tldr.md\n      </p>\n    </div>,\n    document.body,\n  );\n};\n\nconst renderUnsupportedEnvError = () => {\n  ReactDOM.render(\n    <div style={{ margin: '25px' }}>\n      <h1>Unsupported environment</h1>\n      <h2>OCM does not support this environment</h2>\n      <p>\n        Please use one of our supported environments.\n      </p>\n      <p>\n        OCM is only being deployed to this environment to ensure navigation keeps working.\n      </p>\n    </div>,\n    document.getElementById('root'),\n  );\n};\n\nif (!window.insights && APP_DEV_SERVER) {\n  // we don't want this info to ever be complied to the prod build,\n  // so I made sure it's only ever called in development mode\n  renderDevEnvError();\n} else if (APP_API_ENV === 'disabled') {\n  // This is a build for an environment we don't support. render an error.\n  renderUnsupportedEnvError();\n} else {\n  ReactDOM.render(<AppEntry />, document.getElementById('root'));\n}\n","import {\n  SET_FEATURE,\n  ASSISTED_INSTALLER_FEATURE,\n  ASSISTED_INSTALLER_SNO_FEATURE,\n  ASSISTED_INSTALLER_OCS_FEATURE,\n  ASSISTED_INSTALLER_CNV_FEATURE,\n  OSD_TRIAL_FEATURE,\n  ASSISTED_INSTALLER_MERGE_LISTS_FEATURE,\n  ASSISTED_INSTALLER_NETWORK_TYPE_SELECTION_FEATURE,\n  ASSISTED_INSTALLER_PLATFORM_INTEGRATION_FEATURE,\n  OSD_CREATION_WIZARD_FEATURE,\n} from '../constants/featureConstants';\nimport authorizationsService from '../../services/authorizationsService';\n\nconst setFeature = (feature, enabled) => ({\n  type: SET_FEATURE,\n  payload: { feature, enabled },\n});\n\nconst getSimpleUnleashFeature = (unleashFeatureName, name) => ({\n  name,\n  action: () => authorizationsService.selfFeatureReview(unleashFeatureName)\n    .then(unleash => unleash.data.enabled),\n});\n\n// list of features to detect upon app startup\nexport const features = [\n  getSimpleUnleashFeature('osd-trial', OSD_TRIAL_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-sno', ASSISTED_INSTALLER_SNO_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-ocs', ASSISTED_INSTALLER_OCS_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-cnv', ASSISTED_INSTALLER_CNV_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-merge-lists', ASSISTED_INSTALLER_MERGE_LISTS_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-network-type-selection', ASSISTED_INSTALLER_NETWORK_TYPE_SELECTION_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-platform-integration', ASSISTED_INSTALLER_PLATFORM_INTEGRATION_FEATURE),\n  getSimpleUnleashFeature('osd-creation-wizard', OSD_CREATION_WIZARD_FEATURE),\n  {\n    name: ASSISTED_INSTALLER_FEATURE,\n    action: () => Promise.all([\n      authorizationsService.selfAccessReview({ action: 'create', resource_type: 'BareMetalCluster' }),\n      authorizationsService.selfFeatureReview('assisted-installer'),\n    ]).then(([resource, unleash]) => resource.data.allowed && unleash.data.enabled),\n  },\n];\n\nexport const detectFeatures = () => (dispatch) => {\n  features.forEach(({ name, action }) => action()\n    .then(enabled => dispatch(setFeature(name, enabled)))\n    .catch(() => dispatch(setFeature(name, false))));\n};\n","import get from 'lodash/get';\nimport { store } from '../store';\n\nimport { userConstants } from '../constants';\nimport { accountsService, authorizationsService } from '../../services';\nimport { normalizeQuotaCost } from '../../common/normalize';\nimport { normalizedProducts } from '../../common/subscriptionTypes';\nimport { emptyQuota } from '../reducers/userReducer';\n\nconst userInfoResponse = payload => ({\n  payload,\n  type: userConstants.USER_INFO_RESPONSE,\n});\n\nconst availableByCost = (item, resource) => {\n  if (resource.cost === 0) {\n    return Infinity;\n  }\n  // If you're able to create half a node, you're still in \"not enough quota\" situation.\n  return Math.floor((item.allowed - item.consumed) / resource.cost);\n};\n\nconst processClusterQuota = (clustersQuota, item, resources) => {\n  const quota = clustersQuota;\n  const available = item.allowed - item.consumed;\n\n  resources.forEach((resource) => {\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: machineType,\n      product: quotaProduct,\n      billing_model: quotaBilling,\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n\n    // TODO: Honor cost field, specifically cost=0.\n    // TODO: Split data structure by product (https://issues.redhat.com/browse/SDA-3231).\n    //       Until then, ignore ROSA to avoid collision with OSD CCS.\n    if (quotaProduct === normalizedProducts.ROSA) {\n      return;\n    }\n\n    /* eslint-disable no-param-reassign */\n    // Since quota can apply to either AWS or GCP, or \"any\", we compare an exact match or an\n    // \"any\" match. If the quota applies to a specific cloud provider, we add it there. If it\n    // applies to \"any\" cloud provider, we add it to both providers in the quota object.\n    // This also applies to BYOC and AZ.\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}Az` === zoneType) {\n                        zoneQuota[machineType] = available;\n                        zoneQuota.available += available;\n                        categoryQuota.totalAvailable += available;\n                      }\n                      // When calculating for any AZ, skip the totalAvailable property\n                      if (availabilityZoneType === 'any' && zoneType !== 'totalAvailable') {\n                        zoneQuota[machineType] = available;\n                        zoneQuota.available += available;\n                        // To avoid double-counting, we calculate only half for each of the two AZ's\n                        categoryQuota.totalAvailable += available / 2;\n                      }\n\n                      if (categoryQuota.totalAvailable > 0) {\n                        providerQuota.isAvailable = true;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\nconst processNodeQuota = (nodesQuota, item, resources) => {\n  const quota = nodesQuota;\n  const available = item.allowed - item.consumed;\n\n  resources.forEach((resource) => {\n    const {\n      cloud_provider: cloudProvider,\n      resource_name: machineType,\n      product: quotaProduct,\n      billing_model: quotaBilling,\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n\n    // TODO: split data structure by product (https://issues.redhat.com/browse/SDA-3231).\n    //       Until then, ignore ROSA to avoid collision with OSD CCS.\n    if (quotaProduct === normalizedProducts.ROSA) {\n      return;\n    }\n\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    categoryQuota[machineType] = {\n                      available,\n                      cost: resource.cost,\n                    };\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\n// TODO: Split the other data structures by product (https://issues.redhat.com/browse/SDA-3231).\n//    Or replace the whole thing with generic query mechanism treating all types symmetrically.\n\nconst processStorageQuota = (storageQuota, item, resources) => {\n  const quota = storageQuota;\n  resources.forEach((resource) => {\n    const available = availableByCost(item, resource);\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: resourceName,\n      product: quotaProduct,\n      billing_model: quotaBilling = 'standard',\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}AZ` === zoneType || availabilityZoneType === 'any') {\n                        zoneQuota[resourceName] = available;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\nconst processLoadBalancerQuota = (loadBalancerQuota, item, resources) => {\n  const quota = loadBalancerQuota;\n  resources.forEach((resource) => {\n    const available = availableByCost(item, resource);\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: resourceName,\n      product: quotaProduct,\n      billing_model: quotaBilling = 'standard',\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}AZ` === zoneType || availabilityZoneType === 'any') {\n                        zoneQuota[resourceName] = available;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\nconst processAddOnQuota = (addOnsQuota, item, resources) => {\n  const quota = addOnsQuota;\n\n  resources.forEach((resource) => {\n    const available = availableByCost(item, resource);\n    // quota_cost data may include addons you never had quota for (which we won't even show),\n    // and addons with allowed > 0 but all already used up (these we'll show disabled).\n    if (item.allowed === 0 && resource.cost > 0) {\n      return;\n    }\n\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: resourceName,\n      product: quotaProduct,\n      billing_model: quotaBilling,\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}Az` === zoneType) {\n                        zoneQuota[resourceName] = available;\n                        zoneQuota.available += available;\n                        categoryQuota.totalAvailable += available;\n                      }\n                      // When calculating for any AZ, skip the totalAvailable property\n                      if (availabilityZoneType === 'any' && zoneType !== 'totalAvailable') {\n                        zoneQuota[resourceName] = available;\n                        zoneQuota.available += available;\n                        // To avoid double-counting, we calculate only half for each of the two AZ's\n                        categoryQuota.totalAvailable += available / 2;\n                      }\n\n                      if (categoryQuota.totalAvailable > 0) {\n                        providerQuota.isAvailable = true;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\n/**\n * Normalize incoming quota and construct an easy to query structure to figure\n * out how many of each resource types we have available.\n * This is done here to ensure the calculation is done every time we get the quota,\n * and that we won't have to replicate it across different components\n * which might need to query this data.\n */\nconst processQuota = (response) => {\n  const allQuotas = emptyQuota();\n  const items = get(response.data, 'items', []).map(normalizeQuotaCost);\n  allQuotas.items = items;\n  items.forEach((item) => {\n    const resources = get(item, 'related_resources', []);\n    if (resources.length < 1) {\n      return;\n    }\n\n    switch (resources[0].resource_type) {\n      case 'cluster':\n        // cluster quota: \"how many clusters am I allowed to provision?\"\n        processClusterQuota(allQuotas.clustersQuota, item, resources);\n        break;\n\n      case 'compute.node':\n        // node quota: \"how many extra nodes can I add on top of the base cluster?\"\n        processNodeQuota(allQuotas.nodesQuota, item, resources);\n        break;\n\n      case 'pv.storage':\n        // storage quota: \"how much persistent storage quota can I set on the cluster?\"\n        processStorageQuota(allQuotas.storageQuota, item, resources);\n        break;\n\n      case 'network.loadbalancer':\n        // load balancer quota: \"how much load balancer quota can I set on the cluster?\"\n        processLoadBalancerQuota(allQuotas.loadBalancerQuota, item, resources);\n        break;\n\n      case 'add-on':\n        // add-on quota: \"how many of each add-on can I add on top of the base cluster?\"\n        processAddOnQuota(allQuotas.addOnsQuota, item, resources);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return allQuotas;\n};\n\nconst fetchQuota = organizationID => (\n  accountsService.getOrganizationQuota(organizationID).then(processQuota)\n);\n\nconst fetchQuotaAndOrganization = (organizationID, organization) => {\n  const ret = {\n    quota: undefined,\n    organization: organization !== undefined ? organization.details : organization,\n  };\n  const promises = [fetchQuota(organizationID).then((quota) => { ret.quota = quota; })];\n  if (organization === undefined) {\n    promises.push(accountsService.getOrganization(organizationID).then(\n      (fetchedOrganization) => { ret.organization = fetchedOrganization.data; },\n    ));\n  }\n  return Promise.all(promises).then(() => ret);\n};\n\nconst fetchAccountThenQuotaAndOrganization = () => accountsService.getCurrentAccount().then(\n  (response) => {\n    const organizationID = get(response.data, 'organization.id');\n    return (organizationID !== undefined) ? fetchQuotaAndOrganization(organizationID) : Promise.reject(Error('No organization'));\n  },\n);\n\nconst getOrganizationAndQuota = () => {\n  const { userProfile } = store.getState();\n  const organizationID = userProfile?.organization?.details?.id;\n  return dispatch => dispatch({\n    payload: organizationID !== undefined\n      ? fetchQuotaAndOrganization(organizationID, userProfile?.organization)\n      : fetchAccountThenQuotaAndOrganization(),\n    type: userConstants.GET_ORGANIZATION,\n  });\n};\n\nfunction selfTermsReview() {\n  return dispatch => dispatch({\n    type: userConstants.SELF_TERMS_REVIEW,\n    payload: authorizationsService.selfTermsReview(),\n  });\n}\n\nconst userActions = {\n  userInfoResponse,\n  getOrganizationAndQuota,\n  processClusterQuota,\n  processNodeQuota,\n  processStorageQuota,\n  processLoadBalancerQuota,\n  processAddOnQuota,\n  processQuota,\n  selfTermsReview,\n};\n\nexport {\n  userActions,\n  userInfoResponse,\n  getOrganizationAndQuota,\n  selfTermsReview,\n};\n"],"sourceRoot":""}