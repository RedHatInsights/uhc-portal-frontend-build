{"version":3,"file":"bundle.exposed-./RootApp.1f8dcdaef817fb6e.js","mappings":"kWA8CA,MAAM,IAAEA,EAAG,OAAEC,GAAW,EASxBD,EAAIE,mBAAmB,KACvBD,EAAOE,iBAAiB,uBAGxB,MAAMC,UAAiB,cAAvB,c,oBACE,KAAAC,MAAQ,CAAEC,OAAO,EA2EnB,CAzEE,iBAAAC,GACEC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,IAAIC,MAAK,KACnCJ,SAASC,OAAOI,aAAY,OAAkBC,OAAOC,SAASC,UAAU,IAE1E,UAAOC,aACPT,SAASC,OAAOS,KAAKC,UAAUP,MAAMQ,I,OACjB,QAAd,EAAAA,aAAI,EAAJA,EAAMC,gBAAQ,eAAEC,OAClB,EAAAC,MAAMC,UAAS,IAAAC,kBAAiBL,EAAKC,SAASC,OAEhD,UAAOI,cAAcd,MAAK,K,MAGxB,GAFC,EAAAW,MAAMC,UAA8B,WACrCG,KAAKC,SAAS,CAAEtB,OAAO,KAClB,UAAOuB,aAAe,UAAOC,WAAWC,YAC3C,KAAY,OAAD,sBACTC,IAAK,UAAOF,WAAWC,WACoD,CAAC,GAAE,CAC9EE,aAAc,CACZ,IAAI,IACJ,IAAI,eAAoBC,eAAe,CACrCC,SAAS,EACTC,sBAAsB,QAIV,QAAd,EAAAhB,aAAI,EAAJA,EAAMC,gBAAQ,eAAEC,MAAM,CACxB,MAAM,MAAEe,EAAK,SAAEC,GAAalB,EAAKC,SAASC,KAE1C,KAAuBiB,IACrBA,EAAMC,QAAQ,CAAEH,QAAOC,YAAW,G,IAIxC,IAWF9B,SAASC,OAAOgC,OAAOC,YAE3B,CAEA,MAAAC,GACE,MAAM,MAAErC,GAAUqB,KAAKtB,MACvB,GAAIC,EAAO,CAGT,MAAMsC,GAAW,eAEjB,OACE,kBAAC,EAAAC,SAAQ,CAACtB,MAAO,EAAAA,OACf,kBAAC,KAAkB,MACnB,kBAAC,EAAAuB,cAAa,CACZF,SAAUA,EACVG,oBAAqB,QAIrB,kBAAC,EAAAC,aAAY,KACX,kBAAC,IAAG,Q,CAMd,OAAO,IACT,EAEF,S","sources":["webpack://openshift/./src/chrome-main.tsx"],"sourcesContent":["/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport './i18n';\nimport { BrowserRouter } from 'react-router-dom';\nimport { CompatRouter } from 'react-router-dom-v5-compat';\nimport { Provider } from 'react-redux';\n\n// No type definitions\n// @ts-ignore\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nimport * as Sentry from '@sentry/browser';\nimport { SessionTiming } from '@sentry/integrations';\n\nimport * as OCM from '@openshift-assisted/ui-lib/ocm';\n\nimport { authInterceptor } from '~/services/apiRequest';\n\nimport getNavClickParams from './common/getNavClickParams';\nimport ocmBaseName from './common/getBaseName';\n\nimport { userInfoResponse } from './redux/actions/userActions';\nimport { detectFeatures } from './redux/actions/featureActions';\nimport { store } from './redux/store';\n\nimport config from './config';\n\nimport App from './components/App/App';\nimport type { AppThunkDispatch } from './redux/types';\n\nimport './styles/main.scss';\n\nconst { Api, Config } = OCM;\n\n/**\n * Assisted Installer configuration\n *\n * We need to pass axios auth interceptor so every request from AI has proper headers.\n *\n * We also need to set the route base path for the internal AI routing to work properly.\n */\nApi.setAuthInterceptor(authInterceptor);\nConfig.setRouteBasePath('/assisted-installer');\n\n// Chrome 2.0 renders this\nclass AppEntry extends React.Component {\n  state = { ready: false };\n\n  componentDidMount() {\n    insights.chrome.init();\n    insights.chrome.identifyApp('').then(() => {\n      insights.chrome.appNavClick(getNavClickParams(window.location.pathname));\n    });\n    config.dateConfig();\n    insights.chrome.auth.getUser().then((data) => {\n      if (data?.identity?.user) {\n        store.dispatch(userInfoResponse(data.identity.user));\n      }\n      config.fetchConfig().then(() => {\n        (store.dispatch as AppThunkDispatch)(detectFeatures());\n        this.setState({ ready: true });\n        if (!config.envOverride && config.configData.sentryDSN) {\n          Sentry.init({\n            dsn: config.configData.sentryDSN,\n            ...(APP_SENTRY_RELEASE_VERSION ? { release: APP_SENTRY_RELEASE_VERSION } : {}),\n            integrations: [\n              new SessionTiming(),\n              new Sentry.Integrations.GlobalHandlers({\n                onerror: true,\n                onunhandledrejection: false,\n              }),\n            ],\n          });\n          if (data?.identity?.user) {\n            const { email, username } = data.identity.user;\n            // add user info to Sentry\n            Sentry.configureScope((scope) => {\n              scope.setUser({ email, username });\n            });\n          }\n        }\n      });\n    });\n\n    if (\n      // app is running in local development\n      APP_DEV_SERVER ||\n      // app is not built in production mode\n      APP_DEVMODE ||\n      // build is not deployed in a production environment\n      APP_API_ENV !== 'production'\n    ) {\n      insights.chrome.enable.segmentDev();\n    }\n  }\n\n  render() {\n    const { ready } = this.state;\n    if (ready) {\n      // HACK: react-router only looks at `basename` prop once on initialization, so this is\n      //    fragile if we later jump between /preview & /beta.\n      const basename = ocmBaseName();\n\n      return (\n        <Provider store={store}>\n          <NotificationPortal />\n          <BrowserRouter\n            basename={basename}\n            getUserConfirmation={() => {\n              /* Block the default browser prompt (window.confirm). */\n            }}\n          >\n            <CompatRouter>\n              <App />\n            </CompatRouter>\n          </BrowserRouter>\n        </Provider>\n      );\n    }\n    return null;\n  }\n}\nexport default AppEntry;\n"],"names":["Api","Config","setAuthInterceptor","setRouteBasePath","AppEntry","state","ready","componentDidMount","insights","chrome","init","identifyApp","then","appNavClick","window","location","pathname","dateConfig","auth","getUser","data","identity","user","store","dispatch","userInfoResponse","fetchConfig","this","setState","envOverride","configData","sentryDSN","dsn","integrations","GlobalHandlers","onerror","onunhandledrejection","email","username","scope","setUser","enable","segmentDev","render","basename","Provider","BrowserRouter","getUserConfirmation","CompatRouter"],"sourceRoot":""}