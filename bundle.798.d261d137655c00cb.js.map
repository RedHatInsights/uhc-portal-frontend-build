{"version":3,"file":"bundle.798.d261d137655c00cb.js","sources":["webpack://openshift/./src/chrome-main.tsx","webpack://openshift/./src/main.tsx"],"sourceRoot":"","sourcesContent":["/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport './i18n';\nimport { BrowserRouter } from 'react-router-dom';\nimport { CompatRouter } from 'react-router-dom-v5-compat';\nimport { Provider } from 'react-redux';\n\n// No type definitions\n// @ts-ignore\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nimport * as Sentry from '@sentry/browser';\nimport { SessionTiming } from '@sentry/integrations';\n\nimport * as OCM from '@openshift-assisted/ui-lib/ocm';\nimport { GenerateId } from '@patternfly/react-core';\n\nimport useChrome from '@redhat-cloud-services/frontend-components/useChrome';\nimport config from './config';\n\nimport getNavClickParams from './common/getNavClickParams';\nimport ocmBaseName from './common/getBaseName';\n\nimport { userInfoResponse } from './redux/actions/userActions';\nimport { detectFeatures } from './redux/actions/featureActions';\n\nimport { store } from './redux/store';\nimport { authInterceptor } from './services/apiRequest';\n\nimport App from './components/App/App';\nimport type { AppThunkDispatch } from './redux/types';\n\nimport './styles/main.scss';\nimport { Chrome } from './types/types';\n\nconst { Api, Config } = OCM;\n\n/**\n * Assisted Installer configuration\n *\n * We need to pass axios auth interceptor so every request from AI has proper headers.\n *\n * We also need to set the route base path for the internal AI routing to work properly.\n */\nApi.setAuthInterceptor(authInterceptor);\nConfig.setRouteBasePath('/assisted-installer');\n\ntype Props = {\n  chrome: Chrome;\n};\n\nclass AppEntry extends React.Component<Props> {\n  state = { ready: false };\n\n  componentDidMount() {\n    const { chrome } = this.props;\n    chrome.appNavClick(getNavClickParams(window.location.pathname));\n    config.dateConfig();\n    chrome.auth.getUser().then((data: any) => {\n      if (data?.identity?.user) {\n        store.dispatch(userInfoResponse(data.identity.user));\n      }\n      config.fetchConfig(chrome).then(() => {\n        (store.dispatch as AppThunkDispatch)(detectFeatures());\n        this.setState({ ready: true });\n        if (!config.envOverride && config.configData.sentryDSN) {\n          Sentry.init({\n            dsn: config.configData.sentryDSN,\n            ...(APP_SENTRY_RELEASE_VERSION ? { release: APP_SENTRY_RELEASE_VERSION } : {}),\n            autoSessionTracking: false,\n            integrations: [\n              new SessionTiming(),\n              new Sentry.Integrations.GlobalHandlers({\n                onerror: true,\n                onunhandledrejection: false,\n              }),\n            ],\n          });\n          if (data?.identity?.user) {\n            const { email, username } = data.identity.user;\n            // add user info to Sentry\n            Sentry.configureScope((scope) => {\n              scope.setUser({ email, username });\n            });\n          }\n        }\n      });\n      // avoid collisions with generated PF IDs in masthead\n      // workaround for:\n      //   https://issues.redhat.com/browse/RHCLOUD-31437\n      //   https://github.com/patternfly/patternfly-react/issues/10160\n      GenerateId.defaultProps = { prefix: 'pf-random-ocmui-id-' };\n    });\n\n    if (\n      // app is running in local development\n      APP_DEV_SERVER ||\n      // app is not built in production mode\n      APP_DEVMODE ||\n      // build is not deployed in a production environment\n      APP_API_ENV !== 'production'\n    ) {\n      chrome.enable.segmentDev();\n    }\n  }\n\n  render() {\n    const { ready } = this.state;\n    if (ready) {\n      // HACK: react-router only looks at `basename` prop once on initialization, so this is\n      //    fragile if we later jump between /preview & /beta.\n      const basename = ocmBaseName();\n\n      return (\n        <Provider store={store}>\n          <NotificationPortal />\n          <BrowserRouter\n            basename={basename}\n            getUserConfirmation={() => {\n              /* Block the default browser prompt (window.confirm). */\n            }}\n          >\n            <CompatRouter>\n              <App />\n            </CompatRouter>\n          </BrowserRouter>\n        </Provider>\n      );\n    }\n    return null;\n  }\n}\n\n/**\n * Entry point for Chrome 2.0\n *\n * This wrapper exists to call the useChrome hook\n */\nconst AppEntryWrapper = () => {\n  const chrome = useChrome() as Chrome;\n  return chrome.initialized ? <AppEntry chrome={chrome} /> : null;\n};\n\nexport default AppEntryWrapper;\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport fromEntries from 'object.fromentries';\nimport AppEntry from './chrome-main';\n\nif (!Object.fromEntries) {\n  fromEntries.shim();\n}\n\nconst renderDevEnvError = () => {\n  const body = createRoot(document.body as HTMLElement);\n  body.render(\n    <div style={{ margin: '25px' }}>\n      <h1>Development environment error</h1>\n      <h2>You&apos;re accessing the webpack dev server directly</h2>\n      <p>This app is designed to run within the Insights Chrome, and can&apos;t run without it.</p>\n      <p>\n        If you&apos;re already running the Insights Chrome Proxy, you just got the URL wrong.{' '}\n        <a href=\"https://qa.foo.redhat.com:1337/openshift\">Click here to access the app.</a>\n      </p>\n      <p>\n        If you don&apos;t know what the Insights Chrome Proxy is or how to run it, consult README.md\n        and README-tldr.md\n      </p>\n    </div>,\n  );\n};\n\nconst renderUnsupportedEnvError = () => {\n  const root = createRoot(document.getElementById('root') as HTMLElement);\n  root.render(\n    <div style={{ margin: '25px' }}>\n      <h1>Unsupported environment</h1>\n      <h2>OCM does not support this environment</h2>\n      <p>Please use one of our supported environments.</p>\n      <p>OCM is only being deployed to this environment to ensure navigation keeps working.</p>\n    </div>,\n  );\n};\n\nif (!window.insights && APP_DEV_SERVER) {\n  // we don't want this info to ever be complied to the prod build,\n  // so I made sure it's only ever called in development mode\n  renderDevEnvError();\n} else if (APP_API_ENV === 'disabled') {\n  // This is a build for an environment we don't support. render an error.\n  renderUnsupportedEnvError();\n} else {\n  const root = createRoot(document.getElementById('root') as HTMLElement);\n  root.render(<AppEntry />);\n}\n"],"names":["Api","Config","setAuthInterceptor","setRouteBasePath","AppEntry","state","ready","componentDidMount","chrome","this","props","appNavClick","getNavClickParams","window","location","pathname","config","dateConfig","auth","getUser","then","data","identity","user","store","dispatch","userInfoResponse","fetchConfig","setState","envOverride","configData","sentryDSN","dsn","release","autoSessionTracking","integrations","GlobalHandlers","onerror","onunhandledrejection","email","username","scope","setUser","GenerateId","defaultProps","prefix","enable","segmentDev","render","basename","Provider","NotificationPortal","BrowserRouter","getUserConfirmation","CompatRouter","App","Object","fromEntries","insights","document","getElementById","useChrome","initialized"],"mappings":";;+XAiDA,MAAM,IAAEA,EAAG,OAAEC,GAAW,EASxBD,EAAIE,mBAAmB,KACvBD,EAAOE,iBAAiB,uBAMxB,MAAMC,UAAiB,cAAvB,c,oBACE,KAAAC,MAAQ,CAAEC,OAAO,EA+EnB,CA7EE,iBAAAC,GACE,MAAM,OAAEC,GAAWC,KAAKC,MACxBF,EAAOG,aAAY,EAAAC,EAAA,GAAkBC,OAAOC,SAASC,WACrDC,EAAA,QAAOC,aACPT,EAAOU,KAAKC,UAAUC,MAAMC,I,OACR,QAAd,EAAAA,aAAI,EAAJA,EAAMC,gBAAQ,eAAEC,OAClBC,EAAM,MAAAC,UAAS,IAAAC,kBAAiBL,EAAKC,SAASC,OAEhDP,EAAA,QAAOW,YAAYnB,GAAQY,MAAK,K,MAG9B,GAFCI,EAAM,MAAAC,UAA8B,WACrChB,KAAKmB,SAAS,CAAEtB,OAAO,KAClBU,EAAA,QAAOa,aAAeb,EAAA,QAAOc,WAAWC,YAC3C,KAAY,OAAD,sBACTC,IAAKhB,EAAA,QAAOc,WAAWC,WACU,CAAEE,QAAS,iCAAkC,CAC9EC,qBAAqB,EACrBC,aAAc,CACZ,IAAI,IACJ,IAAI,eAAoBC,eAAe,CACrCC,SAAS,EACTC,sBAAsB,QAIV,QAAd,EAAAjB,aAAI,EAAJA,EAAMC,gBAAQ,eAAEC,MAAM,CACxB,MAAM,MAAEgB,EAAK,SAAEC,GAAanB,EAAKC,SAASC,KAE1C,KAAuBkB,IACrBA,EAAMC,QAAQ,CAAEH,QAAOC,YAAW,G,KAS1CG,EAAA,EAAWC,aAAe,CAAEC,OAAQ,sBAAuB,IAW3DrC,EAAOsC,OAAOC,YAElB,CAEA,MAAAC,GACE,MAAM,MAAE1C,GAAUG,KAAKJ,MACvB,GAAIC,EAAO,CAGT,MAAM2C,GAAW,eAEjB,OACE,kBAAC,EAAAC,SAAQ,CAAC1B,MAAOA,EAAAA,OACf,kBAAC2B,EAAA,GAAkB,MACnB,kBAAC,EAAAC,cAAa,CACZH,SAAUA,EACVI,oBAAqB,QAIrB,kBAAC,EAAAC,aAAY,KACX,kBAACC,EAAA,EAAG,Q,CAMd,OAAO,IACT,EC5HGC,OAAOC,aACV,WAkCG5C,OAAO6C,UAQG,OAAWC,SAASC,eAAe,SAC3CZ,OAAO,mBDwFU,KACtB,MAAMxC,GAAS,EAAAqD,EAAA,KACf,OAAOrD,EAAOsD,YAAc,kBAAC1D,EAAQ,CAACI,OAAQA,IAAa,IAAI,GC1F1C,M","debug_id":"cdda3be1-f6b3-511a-8541-267d2857624e"}