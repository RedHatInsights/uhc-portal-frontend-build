{"version":3,"sources":["webpack://cloud.openshift.com/./src/chrome-main.jsx","webpack://cloud.openshift.com/./src/common/getBaseName.js","webpack://cloud.openshift.com/./src/common/getNavClickParams.js","webpack://cloud.openshift.com/./src/components/App/App.jsx","webpack://cloud.openshift.com/./src/redux/actions/featureActions.js","webpack://cloud.openshift.com/./src/redux/actions/userActions.js","webpack://cloud.openshift.com/./src/redux/store.js"],"names":["Api","Config","OCM","setAuthInterceptor","authInterceptor","setRouteBasePath","AppEntry","React","ready","componentDidMount","insights","chrome","init","identifyApp","then","appNavClick","getNavClickParams","window","location","pathname","auth","getUser","data","store","userInfoResponse","identity","user","config","detectFeatures","this","setState","Sentry","dsn","integrations","SessionTiming","onerror","onunhandledrejection","scope","email","username","setUser","render","state","Provider","BrowserRouter","basename","getBaseName","require","appname","removeBaseName","path","replace","RegExp","components","split","id","parentId","secondaryNav","App","children","env","propTypes","PropTypes","connect","userProfile","setFeature","feature","enabled","type","SET_FEATURE","payload","getSimpleUnleashFeature","unleashFeatureName","name","action","authorizationsService","unleash","features","OSD_TRIAL_FEATURE","ASSISTED_INSTALLER_SNO_FEATURE","ASSISTED_INSTALLER_OCS_FEATURE","ASSISTED_INSTALLER_CNV_FEATURE","ASSISTED_INSTALLER_MERGE_LISTS_FEATURE","ASSISTED_INSTALLER_NETWORK_TYPE_SELECTION_FEATURE","ASSISTED_INSTALLER_FEATURE","Promise","all","resource_type","resource","allowed","dispatch","forEach","catch","userConstants","availableByCost","item","cost","Infinity","Math","floor","consumed","processClusterQuota","clustersQuota","resources","quota","available","availability_zone_type","availabilityZoneType","cloud_provider","cloudProvider","resource_name","machineType","product","quotaProduct","billing_model","quotaBilling","infraCategory","byoc","normalizedProducts","Object","entries","billing","billingQuota","productQuota","provider","providerQuota","category","categoryQuota","zoneType","zoneQuota","totalAvailable","isAvailable","processNodeQuota","nodesQuota","processStorageQuota","storageQuota","resourceName","processLoadBalancerQuota","loadBalancerQuota","processAddOnQuota","addOnsQuota","emptyQuota","items","result","values","billingModels","model","keys","knownProducts","p","aws","singleAz","multiAz","rhInfra","gcp","clustersQuotaByProductProviderInfraAz","clustersQuotaByBillingProductProviderInfraAz","nodesQuotaByProductProviderInfra","nodesQuotaByBillingProductProviderInfra","singleAZ","multiAZ","storageQuotaByProductProviderInfraAZ","storageQuotaByBillingProductProviderInfraAZ","loadBalancerQuotaByProductProviderInfraAZ","loadBalancerBillingProductProviderInfraAZ","addOnsQuotaByProductProviderInfraAz","addOnsQuotaByBillingProductProviderInfraAz","processQuota","response","allQuotas","get","map","normalizeQuotaCost","length","fetchQuota","organizationID","accountsService","getOrganizationAndQuota","undefined","ret","organization","promises","reject","Error","selfTermsReview","userActions","history","createBrowserHistory","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","reduxReducers","applyMiddleware","routerMiddleware","thunkMiddleware","promiseMiddleware","notificationsMiddleware","dispatchDefaultFailure","sentryMiddleware"],"mappings":"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","file":"bundle.494.js","sourcesContent":["/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport NotificationPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\n\nimport * as Sentry from '@sentry/browser';\nimport { SessionTiming } from '@sentry/integrations';\n\nimport { OCM } from 'openshift-assisted-ui-lib';\n\nimport config from './config';\n\nimport getNavClickParams from './common/getNavClickParams';\nimport getBaseName from './common/getBaseName';\n\nimport { userInfoResponse } from './redux/actions/userActions';\nimport { detectFeatures } from './redux/actions/featureActions';\n\nimport { store } from './redux/store';\nimport { authInterceptor } from './services/apiRequest';\n\nimport App from './components/App/App';\n\nimport './styles/main.scss';\n\nconst { Api, Config } = OCM;\n\n/**\n * Assisted Installer configuration\n *\n * We need to pass axios auth interceptor so every request from AI has proper headers.\n *\n * We also need to set the route base path for the internal AI routing to work properly.\n */\nApi.setAuthInterceptor(authInterceptor);\nConfig.setRouteBasePath('/assisted-installer');\n\n// Chrome 2.0 renders this\nclass AppEntry extends React.Component {\n  state = { ready: false };\n\n  componentDidMount() {\n    insights.chrome.init();\n    insights.chrome.identifyApp('').then(() => {\n      insights.chrome.appNavClick(getNavClickParams(window.location.pathname));\n    });\n    insights.chrome.auth.getUser()\n      .then((data) => {\n        store.dispatch(userInfoResponse(data && data.identity && data.identity.user));\n        config.fetchConfig()\n          .then(() => {\n            store.dispatch(detectFeatures());\n            this.setState({ ready: true });\n            if (!config.override && config.configData.sentryDSN) {\n              Sentry.init({\n                dsn: config.configData.sentryDSN,\n                integrations: [\n                  new SessionTiming(),\n                  new Sentry.Integrations.GlobalHandlers({\n                    onerror: true,\n                    onunhandledrejection: false,\n                  }),\n                ],\n              });\n              if (data && data.identity && data.identity.user) {\n                // add user info to Sentry\n                Sentry.configureScope((scope) => {\n                  const { email, username } = data.identity.user;\n                  scope.setUser({ email, username });\n                });\n              }\n            }\n          });\n      });\n  }\n\n  render() {\n    const { ready } = this.state;\n    if (ready) {\n      return (\n        <Provider store={store}>\n          <NotificationPortal store={store} />\n          <BrowserRouter basename={getBaseName()}>\n            <App />\n          </BrowserRouter>\n        </Provider>\n      );\n    }\n    return null;\n  }\n}\nexport default AppEntry;\n","const { insights } = require('../../package.json');\n\nfunction getBaseName() {\n  return APP_BETA ? `/beta/${insights.appname}` : `/${insights.appname}`;\n}\n\n/**\n * Removes the basename from the beginning of a path\n * @param {string} path\n */\nfunction removeBaseName(path) {\n  return path.replace(new RegExp(`^${getBaseName()}`, 'i'), '');\n}\n\nfunction getResourcesBase() {\n  return APP_BETA ? `/beta/apps/${insights.appname}` : `/apps/${insights.appname}`;\n}\n\nexport { getResourcesBase, removeBaseName };\n\nexport default getBaseName;\n","/*\nThe Insights Platform delegates menu highlighting resposibility to OCM.\nThis file contain a function mapping OCM paths to Insights Platform `appNavClick` parameters.\nThis is used both for in-app navigation (see app/Insights.jsx) or on-load (see main.jsx)\n*/\n\nimport { removeBaseName } from './getBaseName';\n\n/**\n * Get parameters for `appNavClick` based on the provided path.\n * @param {string} pathname target path\n* */\nexport default function getNavClickParams(pathname) {\n  const cleanPathName = removeBaseName(pathname).replace(/^\\//, '');\n  const components = cleanPathName.split('/');\n\n  // The `id` and `parentId` below correspond to current navigation structure\n  // https://github.com/cben/cloud-services-config/blob/prod-stable/main.yml\n  // TODO: will things change with new upcoming json format?\n  // https://github.com/cben/cloud-services-config/blob/ci-beta/chrome/openshift-navigation.json\n  switch (components[0]) {\n    case 'downloads':\n    case 'token':\n      return { id: 'downloads' };\n\n    case 'quota':\n      return {\n        id: components[1] || 'openshift-quota',\n        parentId: 'subscriptions',\n        secondaryNav: true,\n      };\n\n    // These belong to \"appId\": \"subscriptions\" but important not to send them to \"Clusters\"\n    case 'subscriptions':\n      return {\n        id: components[1],\n        parentId: 'subscriptions',\n        secondaryNav: true,\n      };\n\n    // Regular 1:1 cases.\n    case 'overview':\n    case 'releases':\n      return { id: components[0] };\n\n    // Too many cluster-related pages to list ('', 'details', 'archived', 'create', 'register'...)\n    default:\n      return { id: '' }; // \"Clusters\"\n  }\n}\n","/*\nCopyright (c) 2018 Red Hat, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n  http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n*/\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Router from './Router';\nimport ErrorBoundary from './ErrorBoundary';\nimport EnvOverrideMessage from './EnvOverrideMessage';\n\nimport config from '../../config';\n\nconst App = ({ children }) => (\n  <>\n    <span id=\"scrollToTop\" />\n    {config.override && <EnvOverrideMessage env={config.override} />}\n    <ErrorBoundary>\n      {children || <Router />}\n    </ErrorBoundary>\n  </>\n);\n\nApp.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n};\n\nconst mapStateToProps = state => ({\n  userProfile: state.userProfile,\n});\n\nexport default connect(mapStateToProps)(App);\n","import {\n  SET_FEATURE,\n  ASSISTED_INSTALLER_FEATURE,\n  ASSISTED_INSTALLER_SNO_FEATURE,\n  ASSISTED_INSTALLER_OCS_FEATURE,\n  ASSISTED_INSTALLER_CNV_FEATURE,\n  OSD_TRIAL_FEATURE,\n  ASSISTED_INSTALLER_MERGE_LISTS_FEATURE,\n  ASSISTED_INSTALLER_NETWORK_TYPE_SELECTION_FEATURE,\n} from '../constants/featureConstants';\nimport authorizationsService from '../../services/authorizationsService';\n\nconst setFeature = (feature, enabled) => ({\n  type: SET_FEATURE,\n  payload: { feature, enabled },\n});\n\nconst getSimpleUnleashFeature = (unleashFeatureName, name) => ({\n  name,\n  action: () => authorizationsService.selfFeatureReview(unleashFeatureName)\n    .then(unleash => unleash.data.enabled),\n});\n\n// list of features to detect upon app startup\nexport const features = [\n  getSimpleUnleashFeature('osd-trial', OSD_TRIAL_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-sno', ASSISTED_INSTALLER_SNO_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-ocs', ASSISTED_INSTALLER_OCS_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-cnv', ASSISTED_INSTALLER_CNV_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-merge-lists', ASSISTED_INSTALLER_MERGE_LISTS_FEATURE),\n  getSimpleUnleashFeature('assisted-installer-network-type-selection', ASSISTED_INSTALLER_NETWORK_TYPE_SELECTION_FEATURE),\n  {\n    name: ASSISTED_INSTALLER_FEATURE,\n    action: () => Promise.all([\n      authorizationsService.selfAccessReview({ action: 'create', resource_type: 'BareMetalCluster' }),\n      authorizationsService.selfFeatureReview('assisted-installer'),\n    ]).then(([resource, unleash]) => resource.data.allowed && unleash.data.enabled),\n  },\n];\n\nexport const detectFeatures = () => (dispatch) => {\n  features.forEach(({ name, action }) => action()\n    .then(enabled => dispatch(setFeature(name, enabled)))\n    .catch(() => dispatch(setFeature(name, false))));\n};\n","import get from 'lodash/get';\n\nimport { userConstants } from '../constants';\nimport { accountsService, authorizationsService } from '../../services';\nimport { normalizeQuotaCost } from '../../common/normalize';\nimport { knownProducts, normalizedProducts, billingModels } from '../../common/subscriptionTypes';\n\nconst userInfoResponse = payload => ({\n  payload,\n  type: userConstants.USER_INFO_RESPONSE,\n});\n\nconst availableByCost = (item, resource) => {\n  if (resource.cost === 0) {\n    return Infinity;\n  }\n  // If you're able to create half a node, you're still in \"not enough quota\" situation.\n  return Math.floor((item.allowed - item.consumed) / resource.cost);\n};\n\nconst processClusterQuota = (clustersQuota, item, resources) => {\n  const quota = clustersQuota;\n  const available = item.allowed - item.consumed;\n\n  resources.forEach((resource) => {\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: machineType,\n      product: quotaProduct,\n      billing_model: quotaBilling,\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n\n    // TODO: Honor cost field, specifically cost=0.\n    // TODO: Split data structure by product (https://issues.redhat.com/browse/SDA-3231).\n    //       Until then, ignore ROSA to avoid collision with OSD CCS.\n    if (quotaProduct === normalizedProducts.ROSA) {\n      return;\n    }\n\n    /* eslint-disable no-param-reassign */\n    // Since quota can apply to either AWS or GCP, or \"any\", we compare an exact match or an\n    // \"any\" match. If the quota applies to a specific cloud provider, we add it there. If it\n    // applies to \"any\" cloud provider, we add it to both providers in the quota object.\n    // This also applies to BYOC and AZ.\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}Az` === zoneType) {\n                        zoneQuota[machineType] = available;\n                        zoneQuota.available += available;\n                        categoryQuota.totalAvailable += available;\n                      }\n                      // When calculating for any AZ, skip the totalAvailable property\n                      if (availabilityZoneType === 'any' && zoneType !== 'totalAvailable') {\n                        zoneQuota[machineType] = available;\n                        zoneQuota.available += available;\n                        // To avoid double-counting, we calculate only half for each of the two AZ's\n                        categoryQuota.totalAvailable += available / 2;\n                      }\n\n                      if (categoryQuota.totalAvailable > 0) {\n                        providerQuota.isAvailable = true;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\nconst processNodeQuota = (nodesQuota, item, resources) => {\n  const quota = nodesQuota;\n  const available = item.allowed - item.consumed;\n\n  resources.forEach((resource) => {\n    const {\n      cloud_provider: cloudProvider,\n      resource_name: machineType,\n      product: quotaProduct,\n      billing_model: quotaBilling,\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n\n    // TODO: split data structure by product (https://issues.redhat.com/browse/SDA-3231).\n    //       Until then, ignore ROSA to avoid collision with OSD CCS.\n    if (quotaProduct === normalizedProducts.ROSA) {\n      return;\n    }\n\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    categoryQuota[machineType] = {\n                      available,\n                      cost: resource.cost,\n                    };\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\n// TODO: Split the other data structures by product (https://issues.redhat.com/browse/SDA-3231).\n//    Or replace the whole thing with generic query mechanism treating all types symmetrically.\n\nconst processStorageQuota = (storageQuota, item, resources) => {\n  const quota = storageQuota;\n  resources.forEach((resource) => {\n    const available = availableByCost(item, resource);\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: resourceName,\n      product: quotaProduct,\n      billing_model: quotaBilling = 'standard',\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}AZ` === zoneType || availabilityZoneType === 'any') {\n                        zoneQuota[resourceName] = available;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\nconst processLoadBalancerQuota = (loadBalancerQuota, item, resources) => {\n  const quota = loadBalancerQuota;\n  resources.forEach((resource) => {\n    const available = availableByCost(item, resource);\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: resourceName,\n      product: quotaProduct,\n      billing_model: quotaBilling = 'standard',\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}AZ` === zoneType || availabilityZoneType === 'any') {\n                        zoneQuota[resourceName] = available;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\nconst processAddOnQuota = (addOnsQuota, item, resources) => {\n  const quota = addOnsQuota;\n\n  resources.forEach((resource) => {\n    const available = availableByCost(item, resource);\n    // quota_cost data may include addons you never had quota for (which we won't even show),\n    // and addons with allowed > 0 but all already used up (these we'll show disabled).\n    if (item.allowed === 0 && resource.cost > 0) {\n      return;\n    }\n\n    const {\n      availability_zone_type: availabilityZoneType,\n      cloud_provider: cloudProvider,\n      resource_name: resourceName,\n      product: quotaProduct,\n      billing_model: quotaBilling,\n    } = resource;\n    const infraCategory = resource.byoc === 'rhinfra' ? 'rhInfra' : resource.byoc;\n\n    /* eslint-disable no-param-reassign */\n    Object.entries(quota).forEach(([billing, billingQuota]) => {\n      if (quotaBilling === billing || quotaBilling === 'any') {\n        Object.entries(billingQuota).forEach(([product, productQuota]) => {\n          if (quotaProduct === product || quotaProduct === normalizedProducts.ANY) {\n            Object.entries(productQuota).forEach(([provider, providerQuota]) => {\n              if (cloudProvider === provider || cloudProvider === 'any') {\n                Object.entries(providerQuota).forEach(([category, categoryQuota]) => {\n                  if (infraCategory === category || infraCategory === 'any') {\n                    Object.entries(categoryQuota).forEach(([zoneType, zoneQuota]) => {\n                      if (`${availabilityZoneType}Az` === zoneType) {\n                        zoneQuota[resourceName] = available;\n                        zoneQuota.available += available;\n                        categoryQuota.totalAvailable += available;\n                      }\n                      // When calculating for any AZ, skip the totalAvailable property\n                      if (availabilityZoneType === 'any' && zoneType !== 'totalAvailable') {\n                        zoneQuota[resourceName] = available;\n                        zoneQuota.available += available;\n                        // To avoid double-counting, we calculate only half for each of the two AZ's\n                        categoryQuota.totalAvailable += available / 2;\n                      }\n\n                      if (categoryQuota.totalAvailable > 0) {\n                        providerQuota.isAvailable = true;\n                      }\n                    });\n                  }\n                });\n              }\n            });\n          }\n        });\n      }\n    });\n    /* eslint-enable no-param-reassign */\n  });\n};\n\n/**\n * Constructs a blank quota data structure (extracted for tests).\n */\nconst emptyQuota = () => {\n  const clustersQuotaByAz = () => ({\n    singleAz: { available: 0 },\n    multiAz: { available: 0 },\n    totalAvailable: 0,\n  });\n  const clustersQuotaByInfraAz = () => ({\n    byoc: clustersQuotaByAz(),\n    rhInfra: clustersQuotaByAz(),\n    isAvailable: false,\n  });\n  const clustersQuotaByProviderInfraAz = () => ({\n    aws: clustersQuotaByInfraAz(),\n    gcp: clustersQuotaByInfraAz(),\n  });\n  const clustersQuotaByProductProviderInfraAz = () => {\n    const result = {};\n    Object.keys(knownProducts).forEach((p) => {\n      result[p] = clustersQuotaByProviderInfraAz();\n    });\n    return result;\n  };\n  const clustersQuotaByBillingProductProviderInfraAz = () => {\n    const result = {};\n    Object.values(billingModels).forEach((model) => {\n      result[model] = clustersQuotaByProductProviderInfraAz();\n    });\n    return result;\n  };\n\n  const nodesQuotaByInfra = () => ({\n    byoc: { available: 0 },\n    rhInfra: { available: 0 },\n  });\n  const nodesQuotaByProviderInfra = () => ({\n    aws: nodesQuotaByInfra(),\n    gcp: nodesQuotaByInfra(),\n  });\n  const nodesQuotaByProductProviderInfra = () => {\n    const result = {};\n    Object.keys(knownProducts).forEach((p) => {\n      result[p] = nodesQuotaByProviderInfra();\n    });\n    return result;\n  };\n  const nodesQuotaByBillingProductProviderInfra = () => {\n    const result = {};\n    Object.values(billingModels).forEach((model) => {\n      result[model] = nodesQuotaByProductProviderInfra();\n    });\n    return result;\n  };\n\n  const storageQuotaByAZ = () => ({\n    singleAZ: { available: 0 },\n    multiAZ: { available: 0 },\n  });\n\n  const storageQuotaByInfraAZ = () => ({\n    byoc: storageQuotaByAZ(),\n    rhInfra: storageQuotaByAZ(),\n    isAvailable: false,\n  });\n\n  const storageQuotaByProviderInfraAZ = () => ({\n    aws: storageQuotaByInfraAZ(),\n    gcp: storageQuotaByInfraAZ(),\n  });\n\n  const storageQuotaByProductProviderInfraAZ = () => {\n    const result = {};\n    Object.keys(knownProducts).forEach((p) => {\n      result[p] = storageQuotaByProviderInfraAZ();\n    });\n    return result;\n  };\n\n  // Initialize an empty tree for storage quota.\n  // To be populated at processStorageQuota.\n  // the tree levels are:\n  // billing model -> products -> cloud-provider -> infra (byoc, rhinfra) -> multi / single az.\n  const storageQuotaByBillingProductProviderInfraAZ = () => {\n    const result = {};\n    Object.values(billingModels).forEach((model) => {\n      result[model] = storageQuotaByProductProviderInfraAZ();\n    });\n    return result;\n  };\n\n  const loadBalancerQuotaByAZ = () => ({\n    singleAZ: { available: 0 },\n    multiAZ: { available: 0 },\n  });\n\n  const loadBalancerQuotaByInfraAZ = () => ({\n    byoc: loadBalancerQuotaByAZ(),\n    rhInfra: loadBalancerQuotaByAZ(),\n    isAvailable: false,\n  });\n\n  const loadBalancerQuotaByProviderInfraAZ = () => ({\n    aws: loadBalancerQuotaByInfraAZ(),\n    gcp: loadBalancerQuotaByInfraAZ(),\n  });\n\n  const loadBalancerQuotaByProductProviderInfraAZ = () => {\n    const result = {};\n    Object.keys(knownProducts).forEach((p) => {\n      result[p] = loadBalancerQuotaByProviderInfraAZ();\n    });\n    return result;\n  };\n\n  // Initialize an empty tree for load balancer quota.\n  // To be populated at processLoadBalancerQuota.\n  // the tree levels are:\n  // billing model -> products -> cloud-provider -> infra (byoc, rhinfra) -> multi / single az.\n  const loadBalancerBillingProductProviderInfraAZ = () => {\n    const result = {};\n    Object.values(billingModels).forEach((model) => {\n      result[model] = loadBalancerQuotaByProductProviderInfraAZ();\n    });\n    return result;\n  };\n\n  const addOnsQuotaByAz = () => ({\n    singleAz: { available: 0 },\n    multiAz: { available: 0 },\n    totalAvailable: 0,\n  });\n  const addOnsQuotaByInfraAz = () => ({\n    byoc: addOnsQuotaByAz(),\n    rhInfra: addOnsQuotaByAz(),\n    isAvailable: false,\n  });\n  const addOnsQuotaByProviderInfraAz = () => ({\n    aws: addOnsQuotaByInfraAz(),\n    gcp: addOnsQuotaByInfraAz(),\n  });\n  const addOnsQuotaByProductProviderInfraAz = () => {\n    const result = {};\n    Object.keys(knownProducts).forEach((p) => {\n      result[p] = addOnsQuotaByProviderInfraAz();\n    });\n    return result;\n  };\n  const addOnsQuotaByBillingProductProviderInfraAz = () => {\n    const result = {};\n    Object.values(billingModels).forEach((model) => {\n      result[model] = addOnsQuotaByProductProviderInfraAz();\n    });\n    return result;\n  };\n\n  return {\n    items: [],\n    clustersQuota: clustersQuotaByBillingProductProviderInfraAz(),\n    nodesQuota: nodesQuotaByBillingProductProviderInfra(),\n    storageQuota: storageQuotaByBillingProductProviderInfraAZ(),\n    loadBalancerQuota: loadBalancerBillingProductProviderInfraAZ(),\n    addOnsQuota: addOnsQuotaByBillingProductProviderInfraAz(),\n  };\n};\n\n/**\n * Normalize incoming quota and construct an easy to query structure to figure\n * out how many of each resource types we have available.\n * This is done here to ensure the calculation is done every time we get the quota,\n * and that we won't have to replicate it across different components\n * which might need to query this data.\n */\nconst processQuota = (response) => {\n  const allQuotas = emptyQuota();\n  const items = get(response.data, 'items', []).map(normalizeQuotaCost);\n  allQuotas.items = items;\n  items.forEach((item) => {\n    const resources = get(item, 'related_resources', []);\n    if (resources.length < 1) {\n      return;\n    }\n\n    switch (resources[0].resource_type) {\n      case 'cluster':\n        // cluster quota: \"how many clusters am I allowed to provision?\"\n        processClusterQuota(allQuotas.clustersQuota, item, resources);\n        break;\n\n      case 'compute.node':\n        // node quota: \"how many extra nodes can I add on top of the base cluster?\"\n        processNodeQuota(allQuotas.nodesQuota, item, resources);\n        break;\n\n      case 'pv.storage':\n        // storage quota: \"how much persistent storage quota can I set on the cluster?\"\n        processStorageQuota(allQuotas.storageQuota, item, resources);\n        break;\n\n      case 'network.loadbalancer':\n        // load balancer quota: \"how much load balancer quota can I set on the cluster?\"\n        processLoadBalancerQuota(allQuotas.loadBalancerQuota, item, resources);\n        break;\n\n      case 'add-on':\n        // add-on quota: \"how many of each add-on can I add on top of the base cluster?\"\n        processAddOnQuota(allQuotas.addOnsQuota, item, resources);\n        break;\n\n      default:\n        break;\n    }\n  });\n\n  return allQuotas;\n};\n\nconst fetchQuota = organizationID => (\n  accountsService.getOrganizationQuota(organizationID).then(processQuota)\n);\n\nconst getOrganizationAndQuota = () => ({\n  payload: accountsService.getCurrentAccount().then((response) => {\n    const organizationID = get(response.data, 'organization.id');\n    if (organizationID !== undefined) {\n      const ret = {\n        quota: undefined,\n        organization: undefined,\n      };\n      const promises = [\n        fetchQuota(organizationID).then((quota) => { ret.quota = quota; }),\n        accountsService.getOrganization(organizationID).then(\n          (organization) => { ret.organization = organization; },\n        ),\n      ];\n      return Promise.all(promises).then(() => ret);\n    }\n    return Promise.reject(Error('No organization'));\n  }),\n  type: userConstants.GET_ORGANIZATION,\n});\n\nfunction selfTermsReview() {\n  return dispatch => dispatch({\n    type: userConstants.SELF_TERMS_REVIEW,\n    payload: authorizationsService.selfTermsReview(),\n  });\n}\n\nconst userActions = {\n  userInfoResponse,\n  getOrganizationAndQuota,\n  processClusterQuota,\n  processNodeQuota,\n  processStorageQuota,\n  processLoadBalancerQuota,\n  processAddOnQuota,\n  emptyQuota,\n  processQuota,\n  selfTermsReview,\n};\n\nexport {\n  userActions,\n  userInfoResponse,\n  getOrganizationAndQuota,\n  selfTermsReview,\n};\n","import { applyMiddleware, compose, createStore } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { notificationsMiddleware } from '@redhat-cloud-services/frontend-components-notifications/notificationsMiddleware';\n\nimport { reduxReducers } from './reducers';\nimport sentryMiddleware from './sentryMiddleware';\n\nconst defaultOptions = {\n  dispatchDefaultFailure: false, // automatic error notifications\n};\n\nconst history = createBrowserHistory();\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  reduxReducers(history),\n  composeEnhancer(applyMiddleware(routerMiddleware(history), thunkMiddleware, promiseMiddleware,\n    notificationsMiddleware({ ...defaultOptions }),\n    sentryMiddleware)),\n);\n\nexport {\n  store as default, store, history,\n};\n"],"sourceRoot":""}